/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function() {
var exports = {};
exports.id = "pages/_app";
exports.ids = ["pages/_app"];
exports.modules = {

/***/ "./public/js/jquery.min.js":
/*!*********************************!*\
  !*** ./public/js/jquery.min.js ***!
  \*********************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery v3.2.1 | (c) JS Foundation and other contributors | jquery.org/license */\n!function (a, b) {\n  \"use strict\";\n\n   true && \"object\" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function (a) {\n    if (!a.document) throw new Error(\"jQuery requires a window with a document\");\n    return b(a);\n  } : b(a);\n}( false ? 0 : this, function (a, b) {\n  \"use strict\";\n\n  var c = [],\n      d = a.document,\n      e = Object.getPrototypeOf,\n      f = c.slice,\n      g = c.concat,\n      h = c.push,\n      i = c.indexOf,\n      j = {},\n      k = j.toString,\n      l = j.hasOwnProperty,\n      m = l.toString,\n      n = m.call(Object),\n      o = {};\n\n  function p(a, b) {\n    b = b || d;\n    var c = b.createElement(\"script\");\n    c.text = a, b.head.appendChild(c).parentNode.removeChild(c);\n  }\n\n  var q = \"3.2.1\",\n      r = function (a, b) {\n    return new r.fn.init(a, b);\n  },\n      s = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n      t = /^-ms-/,\n      u = /-([a-z])/g,\n      v = function (a, b) {\n    return b.toUpperCase();\n  };\n\n  r.fn = r.prototype = {\n    jquery: q,\n    constructor: r,\n    length: 0,\n    toArray: function () {\n      return f.call(this);\n    },\n    get: function (a) {\n      return null == a ? f.call(this) : a < 0 ? this[a + this.length] : this[a];\n    },\n    pushStack: function (a) {\n      var b = r.merge(this.constructor(), a);\n      return b.prevObject = this, b;\n    },\n    each: function (a) {\n      return r.each(this, a);\n    },\n    map: function (a) {\n      return this.pushStack(r.map(this, function (b, c) {\n        return a.call(b, c, b);\n      }));\n    },\n    slice: function () {\n      return this.pushStack(f.apply(this, arguments));\n    },\n    first: function () {\n      return this.eq(0);\n    },\n    last: function () {\n      return this.eq(-1);\n    },\n    eq: function (a) {\n      var b = this.length,\n          c = +a + (a < 0 ? b : 0);\n      return this.pushStack(c >= 0 && c < b ? [this[c]] : []);\n    },\n    end: function () {\n      return this.prevObject || this.constructor();\n    },\n    push: h,\n    sort: c.sort,\n    splice: c.splice\n  }, r.extend = r.fn.extend = function () {\n    var a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g = arguments[0] || {},\n        h = 1,\n        i = arguments.length,\n        j = !1;\n\n    for (\"boolean\" == typeof g && (j = g, g = arguments[h] || {}, h++), \"object\" == typeof g || r.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++) if (null != (a = arguments[h])) for (b in a) c = g[b], d = a[b], g !== d && (j && d && (r.isPlainObject(d) || (e = Array.isArray(d))) ? (e ? (e = !1, f = c && Array.isArray(c) ? c : []) : f = c && r.isPlainObject(c) ? c : {}, g[b] = r.extend(j, f, d)) : void 0 !== d && (g[b] = d));\n\n    return g;\n  }, r.extend({\n    expando: \"jQuery\" + (q + Math.random()).replace(/\\D/g, \"\"),\n    isReady: !0,\n    error: function (a) {\n      throw new Error(a);\n    },\n    noop: function () {},\n    isFunction: function (a) {\n      return \"function\" === r.type(a);\n    },\n    isWindow: function (a) {\n      return null != a && a === a.window;\n    },\n    isNumeric: function (a) {\n      var b = r.type(a);\n      return (\"number\" === b || \"string\" === b) && !isNaN(a - parseFloat(a));\n    },\n    isPlainObject: function (a) {\n      var b, c;\n      return !(!a || \"[object Object]\" !== k.call(a)) && (!(b = e(a)) || (c = l.call(b, \"constructor\") && b.constructor, \"function\" == typeof c && m.call(c) === n));\n    },\n    isEmptyObject: function (a) {\n      var b;\n\n      for (b in a) return !1;\n\n      return !0;\n    },\n    type: function (a) {\n      return null == a ? a + \"\" : \"object\" == typeof a || \"function\" == typeof a ? j[k.call(a)] || \"object\" : typeof a;\n    },\n    globalEval: function (a) {\n      p(a);\n    },\n    camelCase: function (a) {\n      return a.replace(t, \"ms-\").replace(u, v);\n    },\n    each: function (a, b) {\n      var c,\n          d = 0;\n\n      if (w(a)) {\n        for (c = a.length; d < c; d++) if (b.call(a[d], d, a[d]) === !1) break;\n      } else for (d in a) if (b.call(a[d], d, a[d]) === !1) break;\n\n      return a;\n    },\n    trim: function (a) {\n      return null == a ? \"\" : (a + \"\").replace(s, \"\");\n    },\n    makeArray: function (a, b) {\n      var c = b || [];\n      return null != a && (w(Object(a)) ? r.merge(c, \"string\" == typeof a ? [a] : a) : h.call(c, a)), c;\n    },\n    inArray: function (a, b, c) {\n      return null == b ? -1 : i.call(b, a, c);\n    },\n    merge: function (a, b) {\n      for (var c = +b.length, d = 0, e = a.length; d < c; d++) a[e++] = b[d];\n\n      return a.length = e, a;\n    },\n    grep: function (a, b, c) {\n      for (var d, e = [], f = 0, g = a.length, h = !c; f < g; f++) d = !b(a[f], f), d !== h && e.push(a[f]);\n\n      return e;\n    },\n    map: function (a, b, c) {\n      var d,\n          e,\n          f = 0,\n          h = [];\n      if (w(a)) for (d = a.length; f < d; f++) e = b(a[f], f, c), null != e && h.push(e);else for (f in a) e = b(a[f], f, c), null != e && h.push(e);\n      return g.apply([], h);\n    },\n    guid: 1,\n    proxy: function (a, b) {\n      var c, d, e;\n      if (\"string\" == typeof b && (c = a[b], b = a, a = c), r.isFunction(a)) return d = f.call(arguments, 2), e = function () {\n        return a.apply(b || this, d.concat(f.call(arguments)));\n      }, e.guid = a.guid = a.guid || r.guid++, e;\n    },\n    now: Date.now,\n    support: o\n  }), \"function\" == typeof Symbol && (r.fn[Symbol.iterator] = c[Symbol.iterator]), r.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (a, b) {\n    j[\"[object \" + b + \"]\"] = b.toLowerCase();\n  });\n\n  function w(a) {\n    var b = !!a && \"length\" in a && a.length,\n        c = r.type(a);\n    return \"function\" !== c && !r.isWindow(a) && (\"array\" === c || 0 === b || \"number\" == typeof b && b > 0 && b - 1 in a);\n  }\n\n  var x = function (a) {\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s,\n        t,\n        u = \"sizzle\" + 1 * new Date(),\n        v = a.document,\n        w = 0,\n        x = 0,\n        y = ha(),\n        z = ha(),\n        A = ha(),\n        B = function (a, b) {\n      return a === b && (l = !0), 0;\n    },\n        C = {}.hasOwnProperty,\n        D = [],\n        E = D.pop,\n        F = D.push,\n        G = D.push,\n        H = D.slice,\n        I = function (a, b) {\n      for (var c = 0, d = a.length; c < d; c++) if (a[c] === b) return c;\n\n      return -1;\n    },\n        J = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n        K = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        L = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n        M = \"\\\\[\" + K + \"*(\" + L + \")(?:\" + K + \"*([*^$|!~]?=)\" + K + \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + L + \"))|)\" + K + \"*\\\\]\",\n        N = \":(\" + L + \")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + M + \")*)|.*)\\\\)|)\",\n        O = new RegExp(K + \"+\", \"g\"),\n        P = new RegExp(\"^\" + K + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + K + \"+$\", \"g\"),\n        Q = new RegExp(\"^\" + K + \"*,\" + K + \"*\"),\n        R = new RegExp(\"^\" + K + \"*([>+~]|\" + K + \")\" + K + \"*\"),\n        S = new RegExp(\"=\" + K + \"*([^\\\\]'\\\"]*?)\" + K + \"*\\\\]\", \"g\"),\n        T = new RegExp(N),\n        U = new RegExp(\"^\" + L + \"$\"),\n        V = {\n      ID: new RegExp(\"^#(\" + L + \")\"),\n      CLASS: new RegExp(\"^\\\\.(\" + L + \")\"),\n      TAG: new RegExp(\"^(\" + L + \"|[*])\"),\n      ATTR: new RegExp(\"^\" + M),\n      PSEUDO: new RegExp(\"^\" + N),\n      CHILD: new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + K + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + K + \"*(?:([+-]|)\" + K + \"*(\\\\d+)|))\" + K + \"*\\\\)|)\", \"i\"),\n      bool: new RegExp(\"^(?:\" + J + \")$\", \"i\"),\n      needsContext: new RegExp(\"^\" + K + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + K + \"*((?:-\\\\d)?\\\\d*)\" + K + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        W = /^(?:input|select|textarea|button)$/i,\n        X = /^h\\d$/i,\n        Y = /^[^{]+\\{\\s*\\[native \\w/,\n        Z = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        $ = /[+~]/,\n        _ = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + K + \"?|(\" + K + \")|.)\", \"ig\"),\n        aa = function (a, b, c) {\n      var d = \"0x\" + b - 65536;\n      return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);\n    },\n        ba = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        ca = function (a, b) {\n      return b ? \"\\0\" === a ? \"\\ufffd\" : a.slice(0, -1) + \"\\\\\" + a.charCodeAt(a.length - 1).toString(16) + \" \" : \"\\\\\" + a;\n    },\n        da = function () {\n      m();\n    },\n        ea = ta(function (a) {\n      return a.disabled === !0 && (\"form\" in a || \"label\" in a);\n    }, {\n      dir: \"parentNode\",\n      next: \"legend\"\n    });\n\n    try {\n      G.apply(D = H.call(v.childNodes), v.childNodes), D[v.childNodes.length].nodeType;\n    } catch (fa) {\n      G = {\n        apply: D.length ? function (a, b) {\n          F.apply(a, H.call(b));\n        } : function (a, b) {\n          var c = a.length,\n              d = 0;\n\n          while (a[c++] = b[d++]);\n\n          a.length = c - 1;\n        }\n      };\n    }\n\n    function ga(a, b, d, e) {\n      var f,\n          h,\n          j,\n          k,\n          l,\n          o,\n          r,\n          s = b && b.ownerDocument,\n          w = b ? b.nodeType : 9;\n      if (d = d || [], \"string\" != typeof a || !a || 1 !== w && 9 !== w && 11 !== w) return d;\n\n      if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) {\n        if (11 !== w && (l = Z.exec(a))) if (f = l[1]) {\n          if (9 === w) {\n            if (!(j = b.getElementById(f))) return d;\n            if (j.id === f) return d.push(j), d;\n          } else if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f) return d.push(j), d;\n        } else {\n          if (l[2]) return G.apply(d, b.getElementsByTagName(a)), d;\n          if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName) return G.apply(d, b.getElementsByClassName(f)), d;\n        }\n\n        if (c.qsa && !A[a + \" \"] && (!q || !q.test(a))) {\n          if (1 !== w) s = b, r = a;else if (\"object\" !== b.nodeName.toLowerCase()) {\n            (k = b.getAttribute(\"id\")) ? k = k.replace(ba, ca) : b.setAttribute(\"id\", k = u), o = g(a), h = o.length;\n\n            while (h--) o[h] = \"#\" + k + \" \" + sa(o[h]);\n\n            r = o.join(\",\"), s = $.test(a) && qa(b.parentNode) || b;\n          }\n          if (r) try {\n            return G.apply(d, s.querySelectorAll(r)), d;\n          } catch (x) {} finally {\n            k === u && b.removeAttribute(\"id\");\n          }\n        }\n      }\n\n      return i(a.replace(P, \"$1\"), b, d, e);\n    }\n\n    function ha() {\n      var a = [];\n\n      function b(c, e) {\n        return a.push(c + \" \") > d.cacheLength && delete b[a.shift()], b[c + \" \"] = e;\n      }\n\n      return b;\n    }\n\n    function ia(a) {\n      return a[u] = !0, a;\n    }\n\n    function ja(a) {\n      var b = n.createElement(\"fieldset\");\n\n      try {\n        return !!a(b);\n      } catch (c) {\n        return !1;\n      } finally {\n        b.parentNode && b.parentNode.removeChild(b), b = null;\n      }\n    }\n\n    function ka(a, b) {\n      var c = a.split(\"|\"),\n          e = c.length;\n\n      while (e--) d.attrHandle[c[e]] = b;\n    }\n\n    function la(a, b) {\n      var c = b && a,\n          d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;\n      if (d) return d;\n      if (c) while (c = c.nextSibling) if (c === b) return -1;\n      return a ? 1 : -1;\n    }\n\n    function ma(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return \"input\" === c && b.type === a;\n      };\n    }\n\n    function na(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return (\"input\" === c || \"button\" === c) && b.type === a;\n      };\n    }\n\n    function oa(a) {\n      return function (b) {\n        return \"form\" in b ? b.parentNode && b.disabled === !1 ? \"label\" in b ? \"label\" in b.parentNode ? b.parentNode.disabled === a : b.disabled === a : b.isDisabled === a || b.isDisabled !== !a && ea(b) === a : b.disabled === a : \"label\" in b && b.disabled === a;\n      };\n    }\n\n    function pa(a) {\n      return ia(function (b) {\n        return b = +b, ia(function (c, d) {\n          var e,\n              f = a([], c.length, b),\n              g = f.length;\n\n          while (g--) c[e = f[g]] && (c[e] = !(d[e] = c[e]));\n        });\n      });\n    }\n\n    function qa(a) {\n      return a && \"undefined\" != typeof a.getElementsByTagName && a;\n    }\n\n    c = ga.support = {}, f = ga.isXML = function (a) {\n      var b = a && (a.ownerDocument || a).documentElement;\n      return !!b && \"HTML\" !== b.nodeName;\n    }, m = ga.setDocument = function (a) {\n      var b,\n          e,\n          g = a ? a.ownerDocument || a : v;\n      return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), v !== n && (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener(\"unload\", da, !1) : e.attachEvent && e.attachEvent(\"onunload\", da)), c.attributes = ja(function (a) {\n        return a.className = \"i\", !a.getAttribute(\"className\");\n      }), c.getElementsByTagName = ja(function (a) {\n        return a.appendChild(n.createComment(\"\")), !a.getElementsByTagName(\"*\").length;\n      }), c.getElementsByClassName = Y.test(n.getElementsByClassName), c.getById = ja(function (a) {\n        return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length;\n      }), c.getById ? (d.filter.ID = function (a) {\n        var b = a.replace(_, aa);\n        return function (a) {\n          return a.getAttribute(\"id\") === b;\n        };\n      }, d.find.ID = function (a, b) {\n        if (\"undefined\" != typeof b.getElementById && p) {\n          var c = b.getElementById(a);\n          return c ? [c] : [];\n        }\n      }) : (d.filter.ID = function (a) {\n        var b = a.replace(_, aa);\n        return function (a) {\n          var c = \"undefined\" != typeof a.getAttributeNode && a.getAttributeNode(\"id\");\n          return c && c.value === b;\n        };\n      }, d.find.ID = function (a, b) {\n        if (\"undefined\" != typeof b.getElementById && p) {\n          var c,\n              d,\n              e,\n              f = b.getElementById(a);\n\n          if (f) {\n            if (c = f.getAttributeNode(\"id\"), c && c.value === a) return [f];\n            e = b.getElementsByName(a), d = 0;\n\n            while (f = e[d++]) if (c = f.getAttributeNode(\"id\"), c && c.value === a) return [f];\n          }\n\n          return [];\n        }\n      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {\n        return \"undefined\" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;\n      } : function (a, b) {\n        var c,\n            d = [],\n            e = 0,\n            f = b.getElementsByTagName(a);\n\n        if (\"*\" === a) {\n          while (c = f[e++]) 1 === c.nodeType && d.push(c);\n\n          return d;\n        }\n\n        return f;\n      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {\n        if (\"undefined\" != typeof b.getElementsByClassName && p) return b.getElementsByClassName(a);\n      }, r = [], q = [], (c.qsa = Y.test(n.querySelectorAll)) && (ja(function (a) {\n        o.appendChild(a).innerHTML = \"<a id='\" + u + \"'></a><select id='\" + u + \"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\", a.querySelectorAll(\"[msallowcapture^='']\").length && q.push(\"[*^$]=\" + K + \"*(?:''|\\\"\\\")\"), a.querySelectorAll(\"[selected]\").length || q.push(\"\\\\[\" + K + \"*(?:value|\" + J + \")\"), a.querySelectorAll(\"[id~=\" + u + \"-]\").length || q.push(\"~=\"), a.querySelectorAll(\":checked\").length || q.push(\":checked\"), a.querySelectorAll(\"a#\" + u + \"+*\").length || q.push(\".#.+[+~]\");\n      }), ja(function (a) {\n        a.innerHTML = \"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";\n        var b = n.createElement(\"input\");\n        b.setAttribute(\"type\", \"hidden\"), a.appendChild(b).setAttribute(\"name\", \"D\"), a.querySelectorAll(\"[name=d]\").length && q.push(\"name\" + K + \"*[*^$|!~]?=\"), 2 !== a.querySelectorAll(\":enabled\").length && q.push(\":enabled\", \":disabled\"), o.appendChild(a).disabled = !0, 2 !== a.querySelectorAll(\":disabled\").length && q.push(\":enabled\", \":disabled\"), a.querySelectorAll(\"*,:x\"), q.push(\",.*:\");\n      })), (c.matchesSelector = Y.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {\n        c.disconnectedMatch = s.call(a, \"*\"), s.call(a, \"[s!='']:x\"), r.push(\"!=\", N);\n      }), q = q.length && new RegExp(q.join(\"|\")), r = r.length && new RegExp(r.join(\"|\")), b = Y.test(o.compareDocumentPosition), t = b || Y.test(o.contains) ? function (a, b) {\n        var c = 9 === a.nodeType ? a.documentElement : a,\n            d = b && b.parentNode;\n        return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));\n      } : function (a, b) {\n        if (b) while (b = b.parentNode) if (b === a) return !0;\n        return !1;\n      }, B = b ? function (a, b) {\n        if (a === b) return l = !0, 0;\n        var d = !a.compareDocumentPosition - !b.compareDocumentPosition;\n        return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? I(k, a) - I(k, b) : 0 : 4 & d ? -1 : 1);\n      } : function (a, b) {\n        if (a === b) return l = !0, 0;\n        var c,\n            d = 0,\n            e = a.parentNode,\n            f = b.parentNode,\n            g = [a],\n            h = [b];\n        if (!e || !f) return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? I(k, a) - I(k, b) : 0;\n        if (e === f) return la(a, b);\n        c = a;\n\n        while (c = c.parentNode) g.unshift(c);\n\n        c = b;\n\n        while (c = c.parentNode) h.unshift(c);\n\n        while (g[d] === h[d]) d++;\n\n        return d ? la(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0;\n      }, n) : n;\n    }, ga.matches = function (a, b) {\n      return ga(a, null, null, b);\n    }, ga.matchesSelector = function (a, b) {\n      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(S, \"='$1']\"), c.matchesSelector && p && !A[b + \" \"] && (!r || !r.test(b)) && (!q || !q.test(b))) try {\n        var d = s.call(a, b);\n        if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;\n      } catch (e) {}\n      return ga(b, n, null, [a]).length > 0;\n    }, ga.contains = function (a, b) {\n      return (a.ownerDocument || a) !== n && m(a), t(a, b);\n    }, ga.attr = function (a, b) {\n      (a.ownerDocument || a) !== n && m(a);\n      var e = d.attrHandle[b.toLowerCase()],\n          f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;\n      return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;\n    }, ga.escape = function (a) {\n      return (a + \"\").replace(ba, ca);\n    }, ga.error = function (a) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + a);\n    }, ga.uniqueSort = function (a) {\n      var b,\n          d = [],\n          e = 0,\n          f = 0;\n\n      if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {\n        while (b = a[f++]) b === a[f] && (e = d.push(f));\n\n        while (e--) a.splice(d[e], 1);\n      }\n\n      return k = null, a;\n    }, e = ga.getText = function (a) {\n      var b,\n          c = \"\",\n          d = 0,\n          f = a.nodeType;\n\n      if (f) {\n        if (1 === f || 9 === f || 11 === f) {\n          if (\"string\" == typeof a.textContent) return a.textContent;\n\n          for (a = a.firstChild; a; a = a.nextSibling) c += e(a);\n        } else if (3 === f || 4 === f) return a.nodeValue;\n      } else while (b = a[d++]) c += e(b);\n\n      return c;\n    }, d = ga.selectors = {\n      cacheLength: 50,\n      createPseudo: ia,\n      match: V,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: !0\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: !0\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        ATTR: function (a) {\n          return a[1] = a[1].replace(_, aa), a[3] = (a[3] || a[4] || a[5] || \"\").replace(_, aa), \"~=\" === a[2] && (a[3] = \" \" + a[3] + \" \"), a.slice(0, 4);\n        },\n        CHILD: function (a) {\n          return a[1] = a[1].toLowerCase(), \"nth\" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * (\"even\" === a[3] || \"odd\" === a[3])), a[5] = +(a[7] + a[8] || \"odd\" === a[3])) : a[3] && ga.error(a[0]), a;\n        },\n        PSEUDO: function (a) {\n          var b,\n              c = !a[6] && a[2];\n          return V.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || \"\" : c && T.test(c) && (b = g(c, !0)) && (b = c.indexOf(\")\", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));\n        }\n      },\n      filter: {\n        TAG: function (a) {\n          var b = a.replace(_, aa).toLowerCase();\n          return \"*\" === a ? function () {\n            return !0;\n          } : function (a) {\n            return a.nodeName && a.nodeName.toLowerCase() === b;\n          };\n        },\n        CLASS: function (a) {\n          var b = y[a + \" \"];\n          return b || (b = new RegExp(\"(^|\" + K + \")\" + a + \"(\" + K + \"|$)\")) && y(a, function (a) {\n            return b.test(\"string\" == typeof a.className && a.className || \"undefined\" != typeof a.getAttribute && a.getAttribute(\"class\") || \"\");\n          });\n        },\n        ATTR: function (a, b, c) {\n          return function (d) {\n            var e = ga.attr(d, a);\n            return null == e ? \"!=\" === b : !b || (e += \"\", \"=\" === b ? e === c : \"!=\" === b ? e !== c : \"^=\" === b ? c && 0 === e.indexOf(c) : \"*=\" === b ? c && e.indexOf(c) > -1 : \"$=\" === b ? c && e.slice(-c.length) === c : \"~=\" === b ? (\" \" + e.replace(O, \" \") + \" \").indexOf(c) > -1 : \"|=\" === b && (e === c || e.slice(0, c.length + 1) === c + \"-\"));\n          };\n        },\n        CHILD: function (a, b, c, d, e) {\n          var f = \"nth\" !== a.slice(0, 3),\n              g = \"last\" !== a.slice(-4),\n              h = \"of-type\" === b;\n          return 1 === d && 0 === e ? function (a) {\n            return !!a.parentNode;\n          } : function (b, c, i) {\n            var j,\n                k,\n                l,\n                m,\n                n,\n                o,\n                p = f !== g ? \"nextSibling\" : \"previousSibling\",\n                q = b.parentNode,\n                r = h && b.nodeName.toLowerCase(),\n                s = !i && !h,\n                t = !1;\n\n            if (q) {\n              if (f) {\n                while (p) {\n                  m = b;\n\n                  while (m = m[p]) if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) return !1;\n\n                  o = p = \"only\" === a && !o && \"nextSibling\";\n                }\n\n                return !0;\n              }\n\n              if (o = [g ? q.firstChild : q.lastChild], g && s) {\n                m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n];\n\n                while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) if (1 === m.nodeType && ++t && m === b) {\n                  k[a] = [w, n, t];\n                  break;\n                }\n              } else if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1) while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b)) break;\n\n              return t -= e, t === d || t % d === 0 && t / d >= 0;\n            }\n          };\n        },\n        PSEUDO: function (a, b) {\n          var c,\n              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error(\"unsupported pseudo: \" + a);\n          return e[u] ? e(b) : e.length > 1 ? (c = [a, a, \"\", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {\n            var d,\n                f = e(a, b),\n                g = f.length;\n\n            while (g--) d = I(a, f[g]), a[d] = !(c[d] = f[g]);\n          }) : function (a) {\n            return e(a, 0, c);\n          }) : e;\n        }\n      },\n      pseudos: {\n        not: ia(function (a) {\n          var b = [],\n              c = [],\n              d = h(a.replace(P, \"$1\"));\n          return d[u] ? ia(function (a, b, c, e) {\n            var f,\n                g = d(a, null, e, []),\n                h = a.length;\n\n            while (h--) (f = g[h]) && (a[h] = !(b[h] = f));\n          }) : function (a, e, f) {\n            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();\n          };\n        }),\n        has: ia(function (a) {\n          return function (b) {\n            return ga(a, b).length > 0;\n          };\n        }),\n        contains: ia(function (a) {\n          return a = a.replace(_, aa), function (b) {\n            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;\n          };\n        }),\n        lang: ia(function (a) {\n          return U.test(a || \"\") || ga.error(\"unsupported lang: \" + a), a = a.replace(_, aa).toLowerCase(), function (b) {\n            var c;\n\n            do if (c = p ? b.lang : b.getAttribute(\"xml:lang\") || b.getAttribute(\"lang\")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + \"-\"); while ((b = b.parentNode) && 1 === b.nodeType);\n\n            return !1;\n          };\n        }),\n        target: function (b) {\n          var c = a.location && a.location.hash;\n          return c && c.slice(1) === b.id;\n        },\n        root: function (a) {\n          return a === o;\n        },\n        focus: function (a) {\n          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);\n        },\n        enabled: oa(!1),\n        disabled: oa(!0),\n        checked: function (a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && !!a.checked || \"option\" === b && !!a.selected;\n        },\n        selected: function (a) {\n          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;\n        },\n        empty: function (a) {\n          for (a = a.firstChild; a; a = a.nextSibling) if (a.nodeType < 6) return !1;\n\n          return !0;\n        },\n        parent: function (a) {\n          return !d.pseudos.empty(a);\n        },\n        header: function (a) {\n          return X.test(a.nodeName);\n        },\n        input: function (a) {\n          return W.test(a.nodeName);\n        },\n        button: function (a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && \"button\" === a.type || \"button\" === b;\n        },\n        text: function (a) {\n          var b;\n          return \"input\" === a.nodeName.toLowerCase() && \"text\" === a.type && (null == (b = a.getAttribute(\"type\")) || \"text\" === b.toLowerCase());\n        },\n        first: pa(function () {\n          return [0];\n        }),\n        last: pa(function (a, b) {\n          return [b - 1];\n        }),\n        eq: pa(function (a, b, c) {\n          return [c < 0 ? c + b : c];\n        }),\n        even: pa(function (a, b) {\n          for (var c = 0; c < b; c += 2) a.push(c);\n\n          return a;\n        }),\n        odd: pa(function (a, b) {\n          for (var c = 1; c < b; c += 2) a.push(c);\n\n          return a;\n        }),\n        lt: pa(function (a, b, c) {\n          for (var d = c < 0 ? c + b : c; --d >= 0;) a.push(d);\n\n          return a;\n        }),\n        gt: pa(function (a, b, c) {\n          for (var d = c < 0 ? c + b : c; ++d < b;) a.push(d);\n\n          return a;\n        })\n      }\n    }, d.pseudos.nth = d.pseudos.eq;\n\n    for (b in {\n      radio: !0,\n      checkbox: !0,\n      file: !0,\n      password: !0,\n      image: !0\n    }) d.pseudos[b] = ma(b);\n\n    for (b in {\n      submit: !0,\n      reset: !0\n    }) d.pseudos[b] = na(b);\n\n    function ra() {}\n\n    ra.prototype = d.filters = d.pseudos, d.setFilters = new ra(), g = ga.tokenize = function (a, b) {\n      var c,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = z[a + \" \"];\n      if (k) return b ? 0 : k.slice(0);\n      h = a, i = [], j = d.preFilter;\n\n      while (h) {\n        c && !(e = Q.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({\n          value: c,\n          type: e[0].replace(P, \" \")\n        }), h = h.slice(c.length));\n\n        for (g in d.filter) !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({\n          value: c,\n          type: g,\n          matches: e\n        }), h = h.slice(c.length));\n\n        if (!c) break;\n      }\n\n      return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);\n    };\n\n    function sa(a) {\n      for (var b = 0, c = a.length, d = \"\"; b < c; b++) d += a[b].value;\n\n      return d;\n    }\n\n    function ta(a, b, c) {\n      var d = b.dir,\n          e = b.next,\n          f = e || d,\n          g = c && \"parentNode\" === f,\n          h = x++;\n      return b.first ? function (b, c, e) {\n        while (b = b[d]) if (1 === b.nodeType || g) return a(b, c, e);\n\n        return !1;\n      } : function (b, c, i) {\n        var j,\n            k,\n            l,\n            m = [w, h];\n\n        if (i) {\n          while (b = b[d]) if ((1 === b.nodeType || g) && a(b, c, i)) return !0;\n        } else while (b = b[d]) if (1 === b.nodeType || g) if (l = b[u] || (b[u] = {}), k = l[b.uniqueID] || (l[b.uniqueID] = {}), e && e === b.nodeName.toLowerCase()) b = b[d] || b;else {\n          if ((j = k[f]) && j[0] === w && j[1] === h) return m[2] = j[2];\n          if (k[f] = m, m[2] = a(b, c, i)) return !0;\n        }\n\n        return !1;\n      };\n    }\n\n    function ua(a) {\n      return a.length > 1 ? function (b, c, d) {\n        var e = a.length;\n\n        while (e--) if (!a[e](b, c, d)) return !1;\n\n        return !0;\n      } : a[0];\n    }\n\n    function va(a, b, c) {\n      for (var d = 0, e = b.length; d < e; d++) ga(a, b[d], c);\n\n      return c;\n    }\n\n    function wa(a, b, c, d, e) {\n      for (var f, g = [], h = 0, i = a.length, j = null != b; h < i; h++) (f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)));\n\n      return g;\n    }\n\n    function xa(a, b, c, d, e, f) {\n      return d && !d[u] && (d = xa(d)), e && !e[u] && (e = xa(e, f)), ia(function (f, g, h, i) {\n        var j,\n            k,\n            l,\n            m = [],\n            n = [],\n            o = g.length,\n            p = f || va(b || \"*\", h.nodeType ? [h] : h, []),\n            q = !a || !f && b ? p : wa(p, m, a, h, i),\n            r = c ? e || (f ? a : o || d) ? [] : g : q;\n\n        if (c && c(q, r, h, i), d) {\n          j = wa(r, n), d(j, [], h, i), k = j.length;\n\n          while (k--) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));\n        }\n\n        if (f) {\n          if (e || a) {\n            if (e) {\n              j = [], k = r.length;\n\n              while (k--) (l = r[k]) && j.push(q[k] = l);\n\n              e(null, r = [], j, i);\n            }\n\n            k = r.length;\n\n            while (k--) (l = r[k]) && (j = e ? I(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));\n          }\n        } else r = wa(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r);\n      });\n    }\n\n    function ya(a) {\n      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[\" \"], i = g ? 1 : 0, k = ta(function (a) {\n        return a === b;\n      }, h, !0), l = ta(function (a) {\n        return I(b, a) > -1;\n      }, h, !0), m = [function (a, c, d) {\n        var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));\n        return b = null, e;\n      }]; i < f; i++) if (c = d.relative[a[i].type]) m = [ta(ua(m), c)];else {\n        if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {\n          for (e = ++i; e < f; e++) if (d.relative[a[e].type]) break;\n\n          return xa(i > 1 && ua(m), i > 1 && sa(a.slice(0, i - 1).concat({\n            value: \" \" === a[i - 2].type ? \"*\" : \"\"\n          })).replace(P, \"$1\"), c, i < e && ya(a.slice(i, e)), e < f && ya(a = a.slice(e)), e < f && sa(a));\n        }\n\n        m.push(c);\n      }\n\n      return ua(m);\n    }\n\n    function za(a, b) {\n      var c = b.length > 0,\n          e = a.length > 0,\n          f = function (f, g, h, i, k) {\n        var l,\n            o,\n            q,\n            r = 0,\n            s = \"0\",\n            t = f && [],\n            u = [],\n            v = j,\n            x = f || e && d.find.TAG(\"*\", k),\n            y = w += null == v ? 1 : Math.random() || .1,\n            z = x.length;\n\n        for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) {\n          if (e && l) {\n            o = 0, g || l.ownerDocument === n || (m(l), h = !p);\n\n            while (q = a[o++]) if (q(l, g || n, h)) {\n              i.push(l);\n              break;\n            }\n\n            k && (w = y);\n          }\n\n          c && ((l = !q && l) && r--, f && t.push(l));\n        }\n\n        if (r += s, c && s !== r) {\n          o = 0;\n\n          while (q = b[o++]) q(t, u, g, h);\n\n          if (f) {\n            if (r > 0) while (s--) t[s] || u[s] || (u[s] = E.call(i));\n            u = wa(u);\n          }\n\n          G.apply(i, u), k && !f && u.length > 0 && r + b.length > 1 && ga.uniqueSort(i);\n        }\n\n        return k && (w = y, j = v), t;\n      };\n\n      return c ? ia(f) : f;\n    }\n\n    return h = ga.compile = function (a, b) {\n      var c,\n          d = [],\n          e = [],\n          f = A[a + \" \"];\n\n      if (!f) {\n        b || (b = g(a)), c = b.length;\n\n        while (c--) f = ya(b[c]), f[u] ? d.push(f) : e.push(f);\n\n        f = A(a, za(e, d)), f.selector = a;\n      }\n\n      return f;\n    }, i = ga.select = function (a, b, c, e) {\n      var f,\n          i,\n          j,\n          k,\n          l,\n          m = \"function\" == typeof a && a,\n          n = !e && g(a = m.selector || a);\n\n      if (c = c || [], 1 === n.length) {\n        if (i = n[0] = n[0].slice(0), i.length > 2 && \"ID\" === (j = i[0]).type && 9 === b.nodeType && p && d.relative[i[1].type]) {\n          if (b = (d.find.ID(j.matches[0].replace(_, aa), b) || [])[0], !b) return c;\n          m && (b = b.parentNode), a = a.slice(i.shift().value.length);\n        }\n\n        f = V.needsContext.test(a) ? 0 : i.length;\n\n        while (f--) {\n          if (j = i[f], d.relative[k = j.type]) break;\n\n          if ((l = d.find[k]) && (e = l(j.matches[0].replace(_, aa), $.test(i[0].type) && qa(b.parentNode) || b))) {\n            if (i.splice(f, 1), a = e.length && sa(i), !a) return G.apply(c, e), c;\n            break;\n          }\n        }\n      }\n\n      return (m || h(a, n))(e, b, !p, c, !b || $.test(a) && qa(b.parentNode) || b), c;\n    }, c.sortStable = u.split(\"\").sort(B).join(\"\") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {\n      return 1 & a.compareDocumentPosition(n.createElement(\"fieldset\"));\n    }), ja(function (a) {\n      return a.innerHTML = \"<a href='#'></a>\", \"#\" === a.firstChild.getAttribute(\"href\");\n    }) || ka(\"type|href|height|width\", function (a, b, c) {\n      if (!c) return a.getAttribute(b, \"type\" === b.toLowerCase() ? 1 : 2);\n    }), c.attributes && ja(function (a) {\n      return a.innerHTML = \"<input/>\", a.firstChild.setAttribute(\"value\", \"\"), \"\" === a.firstChild.getAttribute(\"value\");\n    }) || ka(\"value\", function (a, b, c) {\n      if (!c && \"input\" === a.nodeName.toLowerCase()) return a.defaultValue;\n    }), ja(function (a) {\n      return null == a.getAttribute(\"disabled\");\n    }) || ka(J, function (a, b, c) {\n      var d;\n      if (!c) return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;\n    }), ga;\n  }(a);\n\n  r.find = x, r.expr = x.selectors, r.expr[\":\"] = r.expr.pseudos, r.uniqueSort = r.unique = x.uniqueSort, r.text = x.getText, r.isXMLDoc = x.isXML, r.contains = x.contains, r.escapeSelector = x.escape;\n\n  var y = function (a, b, c) {\n    var d = [],\n        e = void 0 !== c;\n\n    while ((a = a[b]) && 9 !== a.nodeType) if (1 === a.nodeType) {\n      if (e && r(a).is(c)) break;\n      d.push(a);\n    }\n\n    return d;\n  },\n      z = function (a, b) {\n    for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);\n\n    return c;\n  },\n      A = r.expr.match.needsContext;\n\n  function B(a, b) {\n    return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();\n  }\n\n  var C = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i,\n      D = /^.[^:#\\[\\.,]*$/;\n\n  function E(a, b, c) {\n    return r.isFunction(b) ? r.grep(a, function (a, d) {\n      return !!b.call(a, d, a) !== c;\n    }) : b.nodeType ? r.grep(a, function (a) {\n      return a === b !== c;\n    }) : \"string\" != typeof b ? r.grep(a, function (a) {\n      return i.call(b, a) > -1 !== c;\n    }) : D.test(b) ? r.filter(b, a, c) : (b = r.filter(b, a), r.grep(a, function (a) {\n      return i.call(b, a) > -1 !== c && 1 === a.nodeType;\n    }));\n  }\n\n  r.filter = function (a, b, c) {\n    var d = b[0];\n    return c && (a = \":not(\" + a + \")\"), 1 === b.length && 1 === d.nodeType ? r.find.matchesSelector(d, a) ? [d] : [] : r.find.matches(a, r.grep(b, function (a) {\n      return 1 === a.nodeType;\n    }));\n  }, r.fn.extend({\n    find: function (a) {\n      var b,\n          c,\n          d = this.length,\n          e = this;\n      if (\"string\" != typeof a) return this.pushStack(r(a).filter(function () {\n        for (b = 0; b < d; b++) if (r.contains(e[b], this)) return !0;\n      }));\n\n      for (c = this.pushStack([]), b = 0; b < d; b++) r.find(a, e[b], c);\n\n      return d > 1 ? r.uniqueSort(c) : c;\n    },\n    filter: function (a) {\n      return this.pushStack(E(this, a || [], !1));\n    },\n    not: function (a) {\n      return this.pushStack(E(this, a || [], !0));\n    },\n    is: function (a) {\n      return !!E(this, \"string\" == typeof a && A.test(a) ? r(a) : a || [], !1).length;\n    }\n  });\n\n  var F,\n      G = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n      H = r.fn.init = function (a, b, c) {\n    var e, f;\n    if (!a) return this;\n\n    if (c = c || F, \"string\" == typeof a) {\n      if (e = \"<\" === a[0] && \">\" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : G.exec(a), !e || !e[1] && b) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);\n\n      if (e[1]) {\n        if (b = b instanceof r ? b[0] : b, r.merge(this, r.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), C.test(e[1]) && r.isPlainObject(b)) for (e in b) r.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);\n        return this;\n      }\n\n      return f = d.getElementById(e[2]), f && (this[0] = f, this.length = 1), this;\n    }\n\n    return a.nodeType ? (this[0] = a, this.length = 1, this) : r.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(r) : r.makeArray(a, this);\n  };\n\n  H.prototype = r.fn, F = r(d);\n  var I = /^(?:parents|prev(?:Until|All))/,\n      J = {\n    children: !0,\n    contents: !0,\n    next: !0,\n    prev: !0\n  };\n  r.fn.extend({\n    has: function (a) {\n      var b = r(a, this),\n          c = b.length;\n      return this.filter(function () {\n        for (var a = 0; a < c; a++) if (r.contains(this, b[a])) return !0;\n      });\n    },\n    closest: function (a, b) {\n      var c,\n          d = 0,\n          e = this.length,\n          f = [],\n          g = \"string\" != typeof a && r(a);\n      if (!A.test(a)) for (; d < e; d++) for (c = this[d]; c && c !== b; c = c.parentNode) if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && r.find.matchesSelector(c, a))) {\n        f.push(c);\n        break;\n      }\n      return this.pushStack(f.length > 1 ? r.uniqueSort(f) : f);\n    },\n    index: function (a) {\n      return a ? \"string\" == typeof a ? i.call(r(a), this[0]) : i.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n    },\n    add: function (a, b) {\n      return this.pushStack(r.uniqueSort(r.merge(this.get(), r(a, b))));\n    },\n    addBack: function (a) {\n      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));\n    }\n  });\n\n  function K(a, b) {\n    while ((a = a[b]) && 1 !== a.nodeType);\n\n    return a;\n  }\n\n  r.each({\n    parent: function (a) {\n      var b = a.parentNode;\n      return b && 11 !== b.nodeType ? b : null;\n    },\n    parents: function (a) {\n      return y(a, \"parentNode\");\n    },\n    parentsUntil: function (a, b, c) {\n      return y(a, \"parentNode\", c);\n    },\n    next: function (a) {\n      return K(a, \"nextSibling\");\n    },\n    prev: function (a) {\n      return K(a, \"previousSibling\");\n    },\n    nextAll: function (a) {\n      return y(a, \"nextSibling\");\n    },\n    prevAll: function (a) {\n      return y(a, \"previousSibling\");\n    },\n    nextUntil: function (a, b, c) {\n      return y(a, \"nextSibling\", c);\n    },\n    prevUntil: function (a, b, c) {\n      return y(a, \"previousSibling\", c);\n    },\n    siblings: function (a) {\n      return z((a.parentNode || {}).firstChild, a);\n    },\n    children: function (a) {\n      return z(a.firstChild);\n    },\n    contents: function (a) {\n      return B(a, \"iframe\") ? a.contentDocument : (B(a, \"template\") && (a = a.content || a), r.merge([], a.childNodes));\n    }\n  }, function (a, b) {\n    r.fn[a] = function (c, d) {\n      var e = r.map(this, b, c);\n      return \"Until\" !== a.slice(-5) && (d = c), d && \"string\" == typeof d && (e = r.filter(d, e)), this.length > 1 && (J[a] || r.uniqueSort(e), I.test(a) && e.reverse()), this.pushStack(e);\n    };\n  });\n  var L = /[^\\x20\\t\\r\\n\\f]+/g;\n\n  function M(a) {\n    var b = {};\n    return r.each(a.match(L) || [], function (a, c) {\n      b[c] = !0;\n    }), b;\n  }\n\n  r.Callbacks = function (a) {\n    a = \"string\" == typeof a ? M(a) : r.extend({}, a);\n\n    var b,\n        c,\n        d,\n        e,\n        f = [],\n        g = [],\n        h = -1,\n        i = function () {\n      for (e = e || a.once, d = b = !0; g.length; h = -1) {\n        c = g.shift();\n\n        while (++h < f.length) f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1);\n      }\n\n      a.memory || (c = !1), b = !1, e && (f = c ? [] : \"\");\n    },\n        j = {\n      add: function () {\n        return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) {\n          r.each(b, function (b, c) {\n            r.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && \"string\" !== r.type(c) && d(c);\n          });\n        }(arguments), c && !b && i()), this;\n      },\n      remove: function () {\n        return r.each(arguments, function (a, b) {\n          var c;\n\n          while ((c = r.inArray(b, f, c)) > -1) f.splice(c, 1), c <= h && h--;\n        }), this;\n      },\n      has: function (a) {\n        return a ? r.inArray(a, f) > -1 : f.length > 0;\n      },\n      empty: function () {\n        return f && (f = []), this;\n      },\n      disable: function () {\n        return e = g = [], f = c = \"\", this;\n      },\n      disabled: function () {\n        return !f;\n      },\n      lock: function () {\n        return e = g = [], c || b || (f = c = \"\"), this;\n      },\n      locked: function () {\n        return !!e;\n      },\n      fireWith: function (a, c) {\n        return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this;\n      },\n      fire: function () {\n        return j.fireWith(this, arguments), this;\n      },\n      fired: function () {\n        return !!d;\n      }\n    };\n\n    return j;\n  };\n\n  function N(a) {\n    return a;\n  }\n\n  function O(a) {\n    throw a;\n  }\n\n  function P(a, b, c, d) {\n    var e;\n\n    try {\n      a && r.isFunction(e = a.promise) ? e.call(a).done(b).fail(c) : a && r.isFunction(e = a.then) ? e.call(a, b, c) : b.apply(void 0, [a].slice(d));\n    } catch (a) {\n      c.apply(void 0, [a]);\n    }\n  }\n\n  r.extend({\n    Deferred: function (b) {\n      var c = [[\"notify\", \"progress\", r.Callbacks(\"memory\"), r.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", r.Callbacks(\"once memory\"), r.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", r.Callbacks(\"once memory\"), r.Callbacks(\"once memory\"), 1, \"rejected\"]],\n          d = \"pending\",\n          e = {\n        state: function () {\n          return d;\n        },\n        always: function () {\n          return f.done(arguments).fail(arguments), this;\n        },\n        \"catch\": function (a) {\n          return e.then(null, a);\n        },\n        pipe: function () {\n          var a = arguments;\n          return r.Deferred(function (b) {\n            r.each(c, function (c, d) {\n              var e = r.isFunction(a[d[4]]) && a[d[4]];\n              f[d[1]](function () {\n                var a = e && e.apply(this, arguments);\n                a && r.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + \"With\"](this, e ? [a] : arguments);\n              });\n            }), a = null;\n          }).promise();\n        },\n        then: function (b, d, e) {\n          var f = 0;\n\n          function g(b, c, d, e) {\n            return function () {\n              var h = this,\n                  i = arguments,\n                  j = function () {\n                var a, j;\n\n                if (!(b < f)) {\n                  if (a = d.apply(h, i), a === c.promise()) throw new TypeError(\"Thenable self-resolution\");\n                  j = a && (\"object\" == typeof a || \"function\" == typeof a) && a.then, r.isFunction(j) ? e ? j.call(a, g(f, c, N, e), g(f, c, O, e)) : (f++, j.call(a, g(f, c, N, e), g(f, c, O, e), g(f, c, N, c.notifyWith))) : (d !== N && (h = void 0, i = [a]), (e || c.resolveWith)(h, i));\n                }\n              },\n                  k = e ? j : function () {\n                try {\n                  j();\n                } catch (a) {\n                  r.Deferred.exceptionHook && r.Deferred.exceptionHook(a, k.stackTrace), b + 1 >= f && (d !== O && (h = void 0, i = [a]), c.rejectWith(h, i));\n                }\n              };\n\n              b ? k() : (r.Deferred.getStackHook && (k.stackTrace = r.Deferred.getStackHook()), a.setTimeout(k));\n            };\n          }\n\n          return r.Deferred(function (a) {\n            c[0][3].add(g(0, a, r.isFunction(e) ? e : N, a.notifyWith)), c[1][3].add(g(0, a, r.isFunction(b) ? b : N)), c[2][3].add(g(0, a, r.isFunction(d) ? d : O));\n          }).promise();\n        },\n        promise: function (a) {\n          return null != a ? r.extend(a, e) : e;\n        }\n      },\n          f = {};\n      return r.each(c, function (a, b) {\n        var g = b[2],\n            h = b[5];\n        e[b[1]] = g.add, h && g.add(function () {\n          d = h;\n        }, c[3 - a][2].disable, c[0][2].lock), g.add(b[3].fire), f[b[0]] = function () {\n          return f[b[0] + \"With\"](this === f ? void 0 : this, arguments), this;\n        }, f[b[0] + \"With\"] = g.fireWith;\n      }), e.promise(f), b && b.call(f, f), f;\n    },\n    when: function (a) {\n      var b = arguments.length,\n          c = b,\n          d = Array(c),\n          e = f.call(arguments),\n          g = r.Deferred(),\n          h = function (a) {\n        return function (c) {\n          d[a] = this, e[a] = arguments.length > 1 ? f.call(arguments) : c, --b || g.resolveWith(d, e);\n        };\n      };\n\n      if (b <= 1 && (P(a, g.done(h(c)).resolve, g.reject, !b), \"pending\" === g.state() || r.isFunction(e[c] && e[c].then))) return g.then();\n\n      while (c--) P(e[c], h(c), g.reject);\n\n      return g.promise();\n    }\n  });\n  var Q = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n  r.Deferred.exceptionHook = function (b, c) {\n    a.console && a.console.warn && b && Q.test(b.name) && a.console.warn(\"jQuery.Deferred exception: \" + b.message, b.stack, c);\n  }, r.readyException = function (b) {\n    a.setTimeout(function () {\n      throw b;\n    });\n  };\n  var R = r.Deferred();\n  r.fn.ready = function (a) {\n    return R.then(a)[\"catch\"](function (a) {\n      r.readyException(a);\n    }), this;\n  }, r.extend({\n    isReady: !1,\n    readyWait: 1,\n    ready: function (a) {\n      (a === !0 ? --r.readyWait : r.isReady) || (r.isReady = !0, a !== !0 && --r.readyWait > 0 || R.resolveWith(d, [r]));\n    }\n  }), r.ready.then = R.then;\n\n  function S() {\n    d.removeEventListener(\"DOMContentLoaded\", S), a.removeEventListener(\"load\", S), r.ready();\n  }\n\n  \"complete\" === d.readyState || \"loading\" !== d.readyState && !d.documentElement.doScroll ? a.setTimeout(r.ready) : (d.addEventListener(\"DOMContentLoaded\", S), a.addEventListener(\"load\", S));\n\n  var T = function (a, b, c, d, e, f, g) {\n    var h = 0,\n        i = a.length,\n        j = null == c;\n\n    if (\"object\" === r.type(c)) {\n      e = !0;\n\n      for (h in c) T(a, b, h, c[h], !0, f, g);\n    } else if (void 0 !== d && (e = !0, r.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function (a, b, c) {\n      return j.call(r(a), c);\n    })), b)) for (; h < i; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));\n\n    return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;\n  },\n      U = function (a) {\n    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;\n  };\n\n  function V() {\n    this.expando = r.expando + V.uid++;\n  }\n\n  V.uid = 1, V.prototype = {\n    cache: function (a) {\n      var b = a[this.expando];\n      return b || (b = {}, U(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, {\n        value: b,\n        configurable: !0\n      }))), b;\n    },\n    set: function (a, b, c) {\n      var d,\n          e = this.cache(a);\n      if (\"string\" == typeof b) e[r.camelCase(b)] = c;else for (d in b) e[r.camelCase(d)] = b[d];\n      return e;\n    },\n    get: function (a, b) {\n      return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][r.camelCase(b)];\n    },\n    access: function (a, b, c) {\n      return void 0 === b || b && \"string\" == typeof b && void 0 === c ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b);\n    },\n    remove: function (a, b) {\n      var c,\n          d = a[this.expando];\n\n      if (void 0 !== d) {\n        if (void 0 !== b) {\n          Array.isArray(b) ? b = b.map(r.camelCase) : (b = r.camelCase(b), b = b in d ? [b] : b.match(L) || []), c = b.length;\n\n          while (c--) delete d[b[c]];\n        }\n\n        (void 0 === b || r.isEmptyObject(d)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando]);\n      }\n    },\n    hasData: function (a) {\n      var b = a[this.expando];\n      return void 0 !== b && !r.isEmptyObject(b);\n    }\n  };\n  var W = new V(),\n      X = new V(),\n      Y = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      Z = /[A-Z]/g;\n\n  function $(a) {\n    return \"true\" === a || \"false\" !== a && (\"null\" === a ? null : a === +a + \"\" ? +a : Y.test(a) ? JSON.parse(a) : a);\n  }\n\n  function _(a, b, c) {\n    var d;\n    if (void 0 === c && 1 === a.nodeType) if (d = \"data-\" + b.replace(Z, \"-$&\").toLowerCase(), c = a.getAttribute(d), \"string\" == typeof c) {\n      try {\n        c = $(c);\n      } catch (e) {}\n\n      X.set(a, b, c);\n    } else c = void 0;\n    return c;\n  }\n\n  r.extend({\n    hasData: function (a) {\n      return X.hasData(a) || W.hasData(a);\n    },\n    data: function (a, b, c) {\n      return X.access(a, b, c);\n    },\n    removeData: function (a, b) {\n      X.remove(a, b);\n    },\n    _data: function (a, b, c) {\n      return W.access(a, b, c);\n    },\n    _removeData: function (a, b) {\n      W.remove(a, b);\n    }\n  }), r.fn.extend({\n    data: function (a, b) {\n      var c,\n          d,\n          e,\n          f = this[0],\n          g = f && f.attributes;\n\n      if (void 0 === a) {\n        if (this.length && (e = X.get(f), 1 === f.nodeType && !W.get(f, \"hasDataAttrs\"))) {\n          c = g.length;\n\n          while (c--) g[c] && (d = g[c].name, 0 === d.indexOf(\"data-\") && (d = r.camelCase(d.slice(5)), _(f, d, e[d])));\n\n          W.set(f, \"hasDataAttrs\", !0);\n        }\n\n        return e;\n      }\n\n      return \"object\" == typeof a ? this.each(function () {\n        X.set(this, a);\n      }) : T(this, function (b) {\n        var c;\n\n        if (f && void 0 === b) {\n          if (c = X.get(f, a), void 0 !== c) return c;\n          if (c = _(f, a), void 0 !== c) return c;\n        } else this.each(function () {\n          X.set(this, a, b);\n        });\n      }, null, b, arguments.length > 1, null, !0);\n    },\n    removeData: function (a) {\n      return this.each(function () {\n        X.remove(this, a);\n      });\n    }\n  }), r.extend({\n    queue: function (a, b, c) {\n      var d;\n      if (a) return b = (b || \"fx\") + \"queue\", d = W.get(a, b), c && (!d || Array.isArray(c) ? d = W.access(a, b, r.makeArray(c)) : d.push(c)), d || [];\n    },\n    dequeue: function (a, b) {\n      b = b || \"fx\";\n\n      var c = r.queue(a, b),\n          d = c.length,\n          e = c.shift(),\n          f = r._queueHooks(a, b),\n          g = function () {\n        r.dequeue(a, b);\n      };\n\n      \"inprogress\" === e && (e = c.shift(), d--), e && (\"fx\" === b && c.unshift(\"inprogress\"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();\n    },\n    _queueHooks: function (a, b) {\n      var c = b + \"queueHooks\";\n      return W.get(a, c) || W.access(a, c, {\n        empty: r.Callbacks(\"once memory\").add(function () {\n          W.remove(a, [b + \"queue\", c]);\n        })\n      });\n    }\n  }), r.fn.extend({\n    queue: function (a, b) {\n      var c = 2;\n      return \"string\" != typeof a && (b = a, a = \"fx\", c--), arguments.length < c ? r.queue(this[0], a) : void 0 === b ? this : this.each(function () {\n        var c = r.queue(this, a, b);\n        r._queueHooks(this, a), \"fx\" === a && \"inprogress\" !== c[0] && r.dequeue(this, a);\n      });\n    },\n    dequeue: function (a) {\n      return this.each(function () {\n        r.dequeue(this, a);\n      });\n    },\n    clearQueue: function (a) {\n      return this.queue(a || \"fx\", []);\n    },\n    promise: function (a, b) {\n      var c,\n          d = 1,\n          e = r.Deferred(),\n          f = this,\n          g = this.length,\n          h = function () {\n        --d || e.resolveWith(f, [f]);\n      };\n\n      \"string\" != typeof a && (b = a, a = void 0), a = a || \"fx\";\n\n      while (g--) c = W.get(f[g], a + \"queueHooks\"), c && c.empty && (d++, c.empty.add(h));\n\n      return h(), e.promise(b);\n    }\n  });\n\n  var aa = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n      ba = new RegExp(\"^(?:([+-])=|)(\" + aa + \")([a-z%]*)$\", \"i\"),\n      ca = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      da = function (a, b) {\n    return a = b || a, \"none\" === a.style.display || \"\" === a.style.display && r.contains(a.ownerDocument, a) && \"none\" === r.css(a, \"display\");\n  },\n      ea = function (a, b, c, d) {\n    var e,\n        f,\n        g = {};\n\n    for (f in b) g[f] = a.style[f], a.style[f] = b[f];\n\n    e = c.apply(a, d || []);\n\n    for (f in b) a.style[f] = g[f];\n\n    return e;\n  };\n\n  function fa(a, b, c, d) {\n    var e,\n        f = 1,\n        g = 20,\n        h = d ? function () {\n      return d.cur();\n    } : function () {\n      return r.css(a, b, \"\");\n    },\n        i = h(),\n        j = c && c[3] || (r.cssNumber[b] ? \"\" : \"px\"),\n        k = (r.cssNumber[b] || \"px\" !== j && +i) && ba.exec(r.css(a, b));\n\n    if (k && k[3] !== j) {\n      j = j || k[3], c = c || [], k = +i || 1;\n\n      do f = f || \".5\", k /= f, r.style(a, b, k + j); while (f !== (f = h() / i) && 1 !== f && --g);\n    }\n\n    return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e;\n  }\n\n  var ga = {};\n\n  function ha(a) {\n    var b,\n        c = a.ownerDocument,\n        d = a.nodeName,\n        e = ga[d];\n    return e ? e : (b = c.body.appendChild(c.createElement(d)), e = r.css(b, \"display\"), b.parentNode.removeChild(b), \"none\" === e && (e = \"block\"), ga[d] = e, e);\n  }\n\n  function ia(a, b) {\n    for (var c, d, e = [], f = 0, g = a.length; f < g; f++) d = a[f], d.style && (c = d.style.display, b ? (\"none\" === c && (e[f] = W.get(d, \"display\") || null, e[f] || (d.style.display = \"\")), \"\" === d.style.display && da(d) && (e[f] = ha(d))) : \"none\" !== c && (e[f] = \"none\", W.set(d, \"display\", c)));\n\n    for (f = 0; f < g; f++) null != e[f] && (a[f].style.display = e[f]);\n\n    return a;\n  }\n\n  r.fn.extend({\n    show: function () {\n      return ia(this, !0);\n    },\n    hide: function () {\n      return ia(this);\n    },\n    toggle: function (a) {\n      return \"boolean\" == typeof a ? a ? this.show() : this.hide() : this.each(function () {\n        da(this) ? r(this).show() : r(this).hide();\n      });\n    }\n  });\n  var ja = /^(?:checkbox|radio)$/i,\n      ka = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i,\n      la = /^$|\\/(?:java|ecma)script/i,\n      ma = {\n    option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  };\n  ma.optgroup = ma.option, ma.tbody = ma.tfoot = ma.colgroup = ma.caption = ma.thead, ma.th = ma.td;\n\n  function na(a, b) {\n    var c;\n    return c = \"undefined\" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || \"*\") : \"undefined\" != typeof a.querySelectorAll ? a.querySelectorAll(b || \"*\") : [], void 0 === b || b && B(a, b) ? r.merge([a], c) : c;\n  }\n\n  function oa(a, b) {\n    for (var c = 0, d = a.length; c < d; c++) W.set(a[c], \"globalEval\", !b || W.get(b[c], \"globalEval\"));\n  }\n\n  var pa = /<|&#?\\w+;/;\n\n  function qa(a, b, c, d, e) {\n    for (var f, g, h, i, j, k, l = b.createDocumentFragment(), m = [], n = 0, o = a.length; n < o; n++) if (f = a[n], f || 0 === f) if (\"object\" === r.type(f)) r.merge(m, f.nodeType ? [f] : f);else if (pa.test(f)) {\n      g = g || l.appendChild(b.createElement(\"div\")), h = (ka.exec(f) || [\"\", \"\"])[1].toLowerCase(), i = ma[h] || ma._default, g.innerHTML = i[1] + r.htmlPrefilter(f) + i[2], k = i[0];\n\n      while (k--) g = g.lastChild;\n\n      r.merge(m, g.childNodes), g = l.firstChild, g.textContent = \"\";\n    } else m.push(b.createTextNode(f));\n\n    l.textContent = \"\", n = 0;\n\n    while (f = m[n++]) if (d && r.inArray(f, d) > -1) e && e.push(f);else if (j = r.contains(f.ownerDocument, f), g = na(l.appendChild(f), \"script\"), j && oa(g), c) {\n      k = 0;\n\n      while (f = g[k++]) la.test(f.type || \"\") && c.push(f);\n    }\n\n    return l;\n  }\n\n  !function () {\n    var a = d.createDocumentFragment(),\n        b = a.appendChild(d.createElement(\"div\")),\n        c = d.createElement(\"input\");\n    c.setAttribute(\"type\", \"radio\"), c.setAttribute(\"checked\", \"checked\"), c.setAttribute(\"name\", \"t\"), b.appendChild(c), o.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = \"<textarea>x</textarea>\", o.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;\n  }();\n  var ra = d.documentElement,\n      sa = /^key/,\n      ta = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n      ua = /^([^.]*)(?:\\.(.+)|)/;\n\n  function va() {\n    return !0;\n  }\n\n  function wa() {\n    return !1;\n  }\n\n  function xa() {\n    try {\n      return d.activeElement;\n    } catch (a) {}\n  }\n\n  function ya(a, b, c, d, e, f) {\n    var g, h;\n\n    if (\"object\" == typeof b) {\n      \"string\" != typeof c && (d = d || c, c = void 0);\n\n      for (h in b) ya(a, h, c, d, b[h], f);\n\n      return a;\n    }\n\n    if (null == d && null == e ? (e = c, d = c = void 0) : null == e && (\"string\" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) e = wa;else if (!e) return a;\n    return 1 === f && (g = e, e = function (a) {\n      return r().off(a), g.apply(this, arguments);\n    }, e.guid = g.guid || (g.guid = r.guid++)), a.each(function () {\n      r.event.add(this, b, e, d, c);\n    });\n  }\n\n  r.event = {\n    global: {},\n    add: function (a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          n,\n          o,\n          p,\n          q = W.get(a);\n\n      if (q) {\n        c.handler && (f = c, c = f.handler, e = f.selector), e && r.find.matchesSelector(ra, e), c.guid || (c.guid = r.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function (b) {\n          return \"undefined\" != typeof r && r.event.triggered !== b.type ? r.event.dispatch.apply(a, arguments) : void 0;\n        }), b = (b || \"\").match(L) || [\"\"], j = b.length;\n\n        while (j--) h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || \"\").split(\".\").sort(), n && (l = r.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = r.event.special[n] || {}, k = r.extend({\n          type: n,\n          origType: p,\n          data: d,\n          handler: c,\n          guid: c.guid,\n          selector: e,\n          needsContext: e && r.expr.match.needsContext.test(e),\n          namespace: o.join(\".\")\n        }, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), r.event.global[n] = !0);\n      }\n    },\n    remove: function (a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          n,\n          o,\n          p,\n          q = W.hasData(a) && W.get(a);\n\n      if (q && (i = q.events)) {\n        b = (b || \"\").match(L) || [\"\"], j = b.length;\n\n        while (j--) if (h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || \"\").split(\".\").sort(), n) {\n          l = r.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp(\"(^|\\\\.)\" + o.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), g = f = m.length;\n\n          while (f--) k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && (\"**\" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));\n\n          g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || r.removeEvent(a, n, q.handle), delete i[n]);\n        } else for (n in i) r.event.remove(a, n + b[j], c, d, !0);\n\n        r.isEmptyObject(i) && W.remove(a, \"handle events\");\n      }\n    },\n    dispatch: function (a) {\n      var b = r.event.fix(a),\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i = new Array(arguments.length),\n          j = (W.get(this, \"events\") || {})[b.type] || [],\n          k = r.event.special[b.type] || {};\n\n      for (i[0] = b, c = 1; c < arguments.length; c++) i[c] = arguments[c];\n\n      if (b.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, b) !== !1) {\n        h = r.event.handlers.call(this, b, j), c = 0;\n\n        while ((f = h[c++]) && !b.isPropagationStopped()) {\n          b.currentTarget = f.elem, d = 0;\n\n          while ((g = f.handlers[d++]) && !b.isImmediatePropagationStopped()) b.rnamespace && !b.rnamespace.test(g.namespace) || (b.handleObj = g, b.data = g.data, e = ((r.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (b.result = e) === !1 && (b.preventDefault(), b.stopPropagation()));\n        }\n\n        return k.postDispatch && k.postDispatch.call(this, b), b.result;\n      }\n    },\n    handlers: function (a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h = [],\n          i = b.delegateCount,\n          j = a.target;\n      if (i && j.nodeType && !(\"click\" === a.type && a.button >= 1)) for (; j !== this; j = j.parentNode || this) if (1 === j.nodeType && (\"click\" !== a.type || j.disabled !== !0)) {\n        for (f = [], g = {}, c = 0; c < i; c++) d = b[c], e = d.selector + \" \", void 0 === g[e] && (g[e] = d.needsContext ? r(e, this).index(j) > -1 : r.find(e, this, null, [j]).length), g[e] && f.push(d);\n\n        f.length && h.push({\n          elem: j,\n          handlers: f\n        });\n      }\n      return j = this, i < b.length && h.push({\n        elem: j,\n        handlers: b.slice(i)\n      }), h;\n    },\n    addProp: function (a, b) {\n      Object.defineProperty(r.Event.prototype, a, {\n        enumerable: !0,\n        configurable: !0,\n        get: r.isFunction(b) ? function () {\n          if (this.originalEvent) return b(this.originalEvent);\n        } : function () {\n          if (this.originalEvent) return this.originalEvent[a];\n        },\n        set: function (b) {\n          Object.defineProperty(this, a, {\n            enumerable: !0,\n            configurable: !0,\n            writable: !0,\n            value: b\n          });\n        }\n      });\n    },\n    fix: function (a) {\n      return a[r.expando] ? a : new r.Event(a);\n    },\n    special: {\n      load: {\n        noBubble: !0\n      },\n      focus: {\n        trigger: function () {\n          if (this !== xa() && this.focus) return this.focus(), !1;\n        },\n        delegateType: \"focusin\"\n      },\n      blur: {\n        trigger: function () {\n          if (this === xa() && this.blur) return this.blur(), !1;\n        },\n        delegateType: \"focusout\"\n      },\n      click: {\n        trigger: function () {\n          if (\"checkbox\" === this.type && this.click && B(this, \"input\")) return this.click(), !1;\n        },\n        _default: function (a) {\n          return B(a.target, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function (a) {\n          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);\n        }\n      }\n    }\n  }, r.removeEvent = function (a, b, c) {\n    a.removeEventListener && a.removeEventListener(b, c);\n  }, r.Event = function (a, b) {\n    return this instanceof r.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? va : wa, this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target, this.currentTarget = a.currentTarget, this.relatedTarget = a.relatedTarget) : this.type = a, b && r.extend(this, b), this.timeStamp = a && a.timeStamp || r.now(), void (this[r.expando] = !0)) : new r.Event(a, b);\n  }, r.Event.prototype = {\n    constructor: r.Event,\n    isDefaultPrevented: wa,\n    isPropagationStopped: wa,\n    isImmediatePropagationStopped: wa,\n    isSimulated: !1,\n    preventDefault: function () {\n      var a = this.originalEvent;\n      this.isDefaultPrevented = va, a && !this.isSimulated && a.preventDefault();\n    },\n    stopPropagation: function () {\n      var a = this.originalEvent;\n      this.isPropagationStopped = va, a && !this.isSimulated && a.stopPropagation();\n    },\n    stopImmediatePropagation: function () {\n      var a = this.originalEvent;\n      this.isImmediatePropagationStopped = va, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation();\n    }\n  }, r.each({\n    altKey: !0,\n    bubbles: !0,\n    cancelable: !0,\n    changedTouches: !0,\n    ctrlKey: !0,\n    detail: !0,\n    eventPhase: !0,\n    metaKey: !0,\n    pageX: !0,\n    pageY: !0,\n    shiftKey: !0,\n    view: !0,\n    \"char\": !0,\n    charCode: !0,\n    key: !0,\n    keyCode: !0,\n    button: !0,\n    buttons: !0,\n    clientX: !0,\n    clientY: !0,\n    offsetX: !0,\n    offsetY: !0,\n    pointerId: !0,\n    pointerType: !0,\n    screenX: !0,\n    screenY: !0,\n    targetTouches: !0,\n    toElement: !0,\n    touches: !0,\n    which: function (a) {\n      var b = a.button;\n      return null == a.which && sa.test(a.type) ? null != a.charCode ? a.charCode : a.keyCode : !a.which && void 0 !== b && ta.test(a.type) ? 1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0 : a.which;\n    }\n  }, r.event.addProp), r.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (a, b) {\n    r.event.special[a] = {\n      delegateType: b,\n      bindType: b,\n      handle: function (a) {\n        var c,\n            d = this,\n            e = a.relatedTarget,\n            f = a.handleObj;\n        return e && (e === d || r.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;\n      }\n    };\n  }), r.fn.extend({\n    on: function (a, b, c, d) {\n      return ya(this, a, b, c, d);\n    },\n    one: function (a, b, c, d) {\n      return ya(this, a, b, c, d, 1);\n    },\n    off: function (a, b, c) {\n      var d, e;\n      if (a && a.preventDefault && a.handleObj) return d = a.handleObj, r(a.delegateTarget).off(d.namespace ? d.origType + \".\" + d.namespace : d.origType, d.selector, d.handler), this;\n\n      if (\"object\" == typeof a) {\n        for (e in a) this.off(e, b, a[e]);\n\n        return this;\n      }\n\n      return b !== !1 && \"function\" != typeof b || (c = b, b = void 0), c === !1 && (c = wa), this.each(function () {\n        r.event.remove(this, a, c, b);\n      });\n    }\n  });\n  var za = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n      Aa = /<script|<style|<link/i,\n      Ba = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      Ca = /^true\\/(.*)/,\n      Da = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n  function Ea(a, b) {\n    return B(a, \"table\") && B(11 !== b.nodeType ? b : b.firstChild, \"tr\") ? r(\">tbody\", a)[0] || a : a;\n  }\n\n  function Fa(a) {\n    return a.type = (null !== a.getAttribute(\"type\")) + \"/\" + a.type, a;\n  }\n\n  function Ga(a) {\n    var b = Ca.exec(a.type);\n    return b ? a.type = b[1] : a.removeAttribute(\"type\"), a;\n  }\n\n  function Ha(a, b) {\n    var c, d, e, f, g, h, i, j;\n\n    if (1 === b.nodeType) {\n      if (W.hasData(a) && (f = W.access(a), g = W.set(b, f), j = f.events)) {\n        delete g.handle, g.events = {};\n\n        for (e in j) for (c = 0, d = j[e].length; c < d; c++) r.event.add(b, e, j[e][c]);\n      }\n\n      X.hasData(a) && (h = X.access(a), i = r.extend({}, h), X.set(b, i));\n    }\n  }\n\n  function Ia(a, b) {\n    var c = b.nodeName.toLowerCase();\n    \"input\" === c && ja.test(a.type) ? b.checked = a.checked : \"input\" !== c && \"textarea\" !== c || (b.defaultValue = a.defaultValue);\n  }\n\n  function Ja(a, b, c, d) {\n    b = g.apply([], b);\n    var e,\n        f,\n        h,\n        i,\n        j,\n        k,\n        l = 0,\n        m = a.length,\n        n = m - 1,\n        q = b[0],\n        s = r.isFunction(q);\n    if (s || m > 1 && \"string\" == typeof q && !o.checkClone && Ba.test(q)) return a.each(function (e) {\n      var f = a.eq(e);\n      s && (b[0] = q.call(this, e, f.html())), Ja(f, b, c, d);\n    });\n\n    if (m && (e = qa(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {\n      for (h = r.map(na(e, \"script\"), Fa), i = h.length; l < m; l++) j = e, l !== n && (j = r.clone(j, !0, !0), i && r.merge(h, na(j, \"script\"))), c.call(a[l], j, l);\n\n      if (i) for (k = h[h.length - 1].ownerDocument, r.map(h, Ga), l = 0; l < i; l++) j = h[l], la.test(j.type || \"\") && !W.access(j, \"globalEval\") && r.contains(k, j) && (j.src ? r._evalUrl && r._evalUrl(j.src) : p(j.textContent.replace(Da, \"\"), k));\n    }\n\n    return a;\n  }\n\n  function Ka(a, b, c) {\n    for (var d, e = b ? r.filter(b, a) : a, f = 0; null != (d = e[f]); f++) c || 1 !== d.nodeType || r.cleanData(na(d)), d.parentNode && (c && r.contains(d.ownerDocument, d) && oa(na(d, \"script\")), d.parentNode.removeChild(d));\n\n    return a;\n  }\n\n  r.extend({\n    htmlPrefilter: function (a) {\n      return a.replace(za, \"<$1></$2>\");\n    },\n    clone: function (a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h = a.cloneNode(!0),\n          i = r.contains(a.ownerDocument, a);\n      if (!(o.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || r.isXMLDoc(a))) for (g = na(h), f = na(a), d = 0, e = f.length; d < e; d++) Ia(f[d], g[d]);\n      if (b) if (c) for (f = f || na(a), g = g || na(h), d = 0, e = f.length; d < e; d++) Ha(f[d], g[d]);else Ha(a, h);\n      return g = na(h, \"script\"), g.length > 0 && oa(g, !i && na(a, \"script\")), h;\n    },\n    cleanData: function (a) {\n      for (var b, c, d, e = r.event.special, f = 0; void 0 !== (c = a[f]); f++) if (U(c)) {\n        if (b = c[W.expando]) {\n          if (b.events) for (d in b.events) e[d] ? r.event.remove(c, d) : r.removeEvent(c, d, b.handle);\n          c[W.expando] = void 0;\n        }\n\n        c[X.expando] && (c[X.expando] = void 0);\n      }\n    }\n  }), r.fn.extend({\n    detach: function (a) {\n      return Ka(this, a, !0);\n    },\n    remove: function (a) {\n      return Ka(this, a);\n    },\n    text: function (a) {\n      return T(this, function (a) {\n        return void 0 === a ? r.text(this) : this.empty().each(function () {\n          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a);\n        });\n      }, null, a, arguments.length);\n    },\n    append: function () {\n      return Ja(this, arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = Ea(this, a);\n          b.appendChild(a);\n        }\n      });\n    },\n    prepend: function () {\n      return Ja(this, arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = Ea(this, a);\n          b.insertBefore(a, b.firstChild);\n        }\n      });\n    },\n    before: function () {\n      return Ja(this, arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this);\n      });\n    },\n    after: function () {\n      return Ja(this, arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);\n      });\n    },\n    empty: function () {\n      for (var a, b = 0; null != (a = this[b]); b++) 1 === a.nodeType && (r.cleanData(na(a, !1)), a.textContent = \"\");\n\n      return this;\n    },\n    clone: function (a, b) {\n      return a = null != a && a, b = null == b ? a : b, this.map(function () {\n        return r.clone(this, a, b);\n      });\n    },\n    html: function (a) {\n      return T(this, function (a) {\n        var b = this[0] || {},\n            c = 0,\n            d = this.length;\n        if (void 0 === a && 1 === b.nodeType) return b.innerHTML;\n\n        if (\"string\" == typeof a && !Aa.test(a) && !ma[(ka.exec(a) || [\"\", \"\"])[1].toLowerCase()]) {\n          a = r.htmlPrefilter(a);\n\n          try {\n            for (; c < d; c++) b = this[c] || {}, 1 === b.nodeType && (r.cleanData(na(b, !1)), b.innerHTML = a);\n\n            b = 0;\n          } catch (e) {}\n        }\n\n        b && this.empty().append(a);\n      }, null, a, arguments.length);\n    },\n    replaceWith: function () {\n      var a = [];\n      return Ja(this, arguments, function (b) {\n        var c = this.parentNode;\n        r.inArray(this, a) < 0 && (r.cleanData(na(this)), c && c.replaceChild(b, this));\n      }, a);\n    }\n  }), r.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (a, b) {\n    r.fn[a] = function (a) {\n      for (var c, d = [], e = r(a), f = e.length - 1, g = 0; g <= f; g++) c = g === f ? this : this.clone(!0), r(e[g])[b](c), h.apply(d, c.get());\n\n      return this.pushStack(d);\n    };\n  });\n\n  var La = /^margin/,\n      Ma = new RegExp(\"^(\" + aa + \")(?!px)[a-z%]+$\", \"i\"),\n      Na = function (b) {\n    var c = b.ownerDocument.defaultView;\n    return c && c.opener || (c = a), c.getComputedStyle(b);\n  };\n\n  !function () {\n    function b() {\n      if (i) {\n        i.style.cssText = \"box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%\", i.innerHTML = \"\", ra.appendChild(h);\n        var b = a.getComputedStyle(i);\n        c = \"1%\" !== b.top, g = \"2px\" === b.marginLeft, e = \"4px\" === b.width, i.style.marginRight = \"50%\", f = \"4px\" === b.marginRight, ra.removeChild(h), i = null;\n      }\n    }\n\n    var c,\n        e,\n        f,\n        g,\n        h = d.createElement(\"div\"),\n        i = d.createElement(\"div\");\n    i.style && (i.style.backgroundClip = \"content-box\", i.cloneNode(!0).style.backgroundClip = \"\", o.clearCloneStyle = \"content-box\" === i.style.backgroundClip, h.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute\", h.appendChild(i), r.extend(o, {\n      pixelPosition: function () {\n        return b(), c;\n      },\n      boxSizingReliable: function () {\n        return b(), e;\n      },\n      pixelMarginRight: function () {\n        return b(), f;\n      },\n      reliableMarginLeft: function () {\n        return b(), g;\n      }\n    }));\n  }();\n\n  function Oa(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.style;\n    return c = c || Na(a), c && (g = c.getPropertyValue(b) || c[b], \"\" !== g || r.contains(a.ownerDocument, a) || (g = r.style(a, b)), !o.pixelMarginRight() && Ma.test(g) && La.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + \"\" : g;\n  }\n\n  function Pa(a, b) {\n    return {\n      get: function () {\n        return a() ? void delete this.get : (this.get = b).apply(this, arguments);\n      }\n    };\n  }\n\n  var Qa = /^(none|table(?!-c[ea]).+)/,\n      Ra = /^--/,\n      Sa = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      Ta = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  },\n      Ua = [\"Webkit\", \"Moz\", \"ms\"],\n      Va = d.createElement(\"div\").style;\n\n  function Wa(a) {\n    if (a in Va) return a;\n    var b = a[0].toUpperCase() + a.slice(1),\n        c = Ua.length;\n\n    while (c--) if (a = Ua[c] + b, a in Va) return a;\n  }\n\n  function Xa(a) {\n    var b = r.cssProps[a];\n    return b || (b = r.cssProps[a] = Wa(a) || a), b;\n  }\n\n  function Ya(a, b, c) {\n    var d = ba.exec(b);\n    return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || \"px\") : b;\n  }\n\n  function Za(a, b, c, d, e) {\n    var f,\n        g = 0;\n\n    for (f = c === (d ? \"border\" : \"content\") ? 4 : \"width\" === b ? 1 : 0; f < 4; f += 2) \"margin\" === c && (g += r.css(a, c + ca[f], !0, e)), d ? (\"content\" === c && (g -= r.css(a, \"padding\" + ca[f], !0, e)), \"margin\" !== c && (g -= r.css(a, \"border\" + ca[f] + \"Width\", !0, e))) : (g += r.css(a, \"padding\" + ca[f], !0, e), \"padding\" !== c && (g += r.css(a, \"border\" + ca[f] + \"Width\", !0, e)));\n\n    return g;\n  }\n\n  function $a(a, b, c) {\n    var d,\n        e = Na(a),\n        f = Oa(a, b, e),\n        g = \"border-box\" === r.css(a, \"boxSizing\", !1, e);\n    return Ma.test(f) ? f : (d = g && (o.boxSizingReliable() || f === a.style[b]), \"auto\" === f && (f = a[\"offset\" + b[0].toUpperCase() + b.slice(1)]), f = parseFloat(f) || 0, f + Za(a, b, c || (g ? \"border\" : \"content\"), d, e) + \"px\");\n  }\n\n  r.extend({\n    cssHooks: {\n      opacity: {\n        get: function (a, b) {\n          if (b) {\n            var c = Oa(a, \"opacity\");\n            return \"\" === c ? \"1\" : c;\n          }\n        }\n      }\n    },\n    cssNumber: {\n      animationIterationCount: !0,\n      columnCount: !0,\n      fillOpacity: !0,\n      flexGrow: !0,\n      flexShrink: !0,\n      fontWeight: !0,\n      lineHeight: !0,\n      opacity: !0,\n      order: !0,\n      orphans: !0,\n      widows: !0,\n      zIndex: !0,\n      zoom: !0\n    },\n    cssProps: {\n      \"float\": \"cssFloat\"\n    },\n    style: function (a, b, c, d) {\n      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {\n        var e,\n            f,\n            g,\n            h = r.camelCase(b),\n            i = Ra.test(b),\n            j = a.style;\n        return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], void 0 === c ? g && \"get\" in g && void 0 !== (e = g.get(a, !1, d)) ? e : j[b] : (f = typeof c, \"string\" === f && (e = ba.exec(c)) && e[1] && (c = fa(a, b, e), f = \"number\"), null != c && c === c && (\"number\" === f && (c += e && e[3] || (r.cssNumber[h] ? \"\" : \"px\")), o.clearCloneStyle || \"\" !== c || 0 !== b.indexOf(\"background\") || (j[b] = \"inherit\"), g && \"set\" in g && void 0 === (c = g.set(a, c, d)) || (i ? j.setProperty(b, c) : j[b] = c)), void 0);\n      }\n    },\n    css: function (a, b, c, d) {\n      var e,\n          f,\n          g,\n          h = r.camelCase(b),\n          i = Ra.test(b);\n      return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], g && \"get\" in g && (e = g.get(a, !0, c)), void 0 === e && (e = Oa(a, b, d)), \"normal\" === e && b in Ta && (e = Ta[b]), \"\" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e;\n    }\n  }), r.each([\"height\", \"width\"], function (a, b) {\n    r.cssHooks[b] = {\n      get: function (a, c, d) {\n        if (c) return !Qa.test(r.css(a, \"display\")) || a.getClientRects().length && a.getBoundingClientRect().width ? $a(a, b, d) : ea(a, Sa, function () {\n          return $a(a, b, d);\n        });\n      },\n      set: function (a, c, d) {\n        var e,\n            f = d && Na(a),\n            g = d && Za(a, b, d, \"border-box\" === r.css(a, \"boxSizing\", !1, f), f);\n        return g && (e = ba.exec(c)) && \"px\" !== (e[3] || \"px\") && (a.style[b] = c, c = r.css(a, b)), Ya(a, c, g);\n      }\n    };\n  }), r.cssHooks.marginLeft = Pa(o.reliableMarginLeft, function (a, b) {\n    if (b) return (parseFloat(Oa(a, \"marginLeft\")) || a.getBoundingClientRect().left - ea(a, {\n      marginLeft: 0\n    }, function () {\n      return a.getBoundingClientRect().left;\n    })) + \"px\";\n  }), r.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (a, b) {\n    r.cssHooks[a + b] = {\n      expand: function (c) {\n        for (var d = 0, e = {}, f = \"string\" == typeof c ? c.split(\" \") : [c]; d < 4; d++) e[a + ca[d] + b] = f[d] || f[d - 2] || f[0];\n\n        return e;\n      }\n    }, La.test(a) || (r.cssHooks[a + b].set = Ya);\n  }), r.fn.extend({\n    css: function (a, b) {\n      return T(this, function (a, b, c) {\n        var d,\n            e,\n            f = {},\n            g = 0;\n\n        if (Array.isArray(b)) {\n          for (d = Na(a), e = b.length; g < e; g++) f[b[g]] = r.css(a, b[g], !1, d);\n\n          return f;\n        }\n\n        return void 0 !== c ? r.style(a, b, c) : r.css(a, b);\n      }, a, b, arguments.length > 1);\n    }\n  });\n\n  function _a(a, b, c, d, e) {\n    return new _a.prototype.init(a, b, c, d, e);\n  }\n\n  r.Tween = _a, _a.prototype = {\n    constructor: _a,\n    init: function (a, b, c, d, e, f) {\n      this.elem = a, this.prop = c, this.easing = e || r.easing._default, this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (r.cssNumber[c] ? \"\" : \"px\");\n    },\n    cur: function () {\n      var a = _a.propHooks[this.prop];\n      return a && a.get ? a.get(this) : _a.propHooks._default.get(this);\n    },\n    run: function (a) {\n      var b,\n          c = _a.propHooks[this.prop];\n      return this.options.duration ? this.pos = b = r.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : _a.propHooks._default.set(this), this;\n    }\n  }, _a.prototype.init.prototype = _a.prototype, _a.propHooks = {\n    _default: {\n      get: function (a) {\n        var b;\n        return 1 !== a.elem.nodeType || null != a.elem[a.prop] && null == a.elem.style[a.prop] ? a.elem[a.prop] : (b = r.css(a.elem, a.prop, \"\"), b && \"auto\" !== b ? b : 0);\n      },\n      set: function (a) {\n        r.fx.step[a.prop] ? r.fx.step[a.prop](a) : 1 !== a.elem.nodeType || null == a.elem.style[r.cssProps[a.prop]] && !r.cssHooks[a.prop] ? a.elem[a.prop] = a.now : r.style(a.elem, a.prop, a.now + a.unit);\n      }\n    }\n  }, _a.propHooks.scrollTop = _a.propHooks.scrollLeft = {\n    set: function (a) {\n      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);\n    }\n  }, r.easing = {\n    linear: function (a) {\n      return a;\n    },\n    swing: function (a) {\n      return .5 - Math.cos(a * Math.PI) / 2;\n    },\n    _default: \"swing\"\n  }, r.fx = _a.prototype.init, r.fx.step = {};\n  var ab,\n      bb,\n      cb = /^(?:toggle|show|hide)$/,\n      db = /queueHooks$/;\n\n  function eb() {\n    bb && (d.hidden === !1 && a.requestAnimationFrame ? a.requestAnimationFrame(eb) : a.setTimeout(eb, r.fx.interval), r.fx.tick());\n  }\n\n  function fb() {\n    return a.setTimeout(function () {\n      ab = void 0;\n    }), ab = r.now();\n  }\n\n  function gb(a, b) {\n    var c,\n        d = 0,\n        e = {\n      height: a\n    };\n\n    for (b = b ? 1 : 0; d < 4; d += 2 - b) c = ca[d], e[\"margin\" + c] = e[\"padding\" + c] = a;\n\n    return b && (e.opacity = e.width = a), e;\n  }\n\n  function hb(a, b, c) {\n    for (var d, e = (kb.tweeners[b] || []).concat(kb.tweeners[\"*\"]), f = 0, g = e.length; f < g; f++) if (d = e[f].call(c, b, a)) return d;\n  }\n\n  function ib(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k,\n        l = \"width\" in b || \"height\" in b,\n        m = this,\n        n = {},\n        o = a.style,\n        p = a.nodeType && da(a),\n        q = W.get(a, \"fxshow\");\n    c.queue || (g = r._queueHooks(a, \"fx\"), null == g.unqueued && (g.unqueued = 0, h = g.empty.fire, g.empty.fire = function () {\n      g.unqueued || h();\n    }), g.unqueued++, m.always(function () {\n      m.always(function () {\n        g.unqueued--, r.queue(a, \"fx\").length || g.empty.fire();\n      });\n    }));\n\n    for (d in b) if (e = b[d], cb.test(e)) {\n      if (delete b[d], f = f || \"toggle\" === e, e === (p ? \"hide\" : \"show\")) {\n        if (\"show\" !== e || !q || void 0 === q[d]) continue;\n        p = !0;\n      }\n\n      n[d] = q && q[d] || r.style(a, d);\n    }\n\n    if (i = !r.isEmptyObject(b), i || !r.isEmptyObject(n)) {\n      l && 1 === a.nodeType && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = q && q.display, null == j && (j = W.get(a, \"display\")), k = r.css(a, \"display\"), \"none\" === k && (j ? k = j : (ia([a], !0), j = a.style.display || j, k = r.css(a, \"display\"), ia([a]))), (\"inline\" === k || \"inline-block\" === k && null != j) && \"none\" === r.css(a, \"float\") && (i || (m.done(function () {\n        o.display = j;\n      }), null == j && (k = o.display, j = \"none\" === k ? \"\" : k)), o.display = \"inline-block\")), c.overflow && (o.overflow = \"hidden\", m.always(function () {\n        o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];\n      })), i = !1;\n\n      for (d in n) i || (q ? \"hidden\" in q && (p = q.hidden) : q = W.access(a, \"fxshow\", {\n        display: j\n      }), f && (q.hidden = !p), p && ia([a], !0), m.done(function () {\n        p || ia([a]), W.remove(a, \"fxshow\");\n\n        for (d in n) r.style(a, d, n[d]);\n      })), i = hb(p ? q[d] : 0, d, m), d in q || (q[d] = i.start, p && (i.end = i.start, i.start = 0));\n    }\n  }\n\n  function jb(a, b) {\n    var c, d, e, f, g;\n\n    for (c in a) if (d = r.camelCase(c), e = b[d], f = a[c], Array.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = r.cssHooks[d], g && \"expand\" in g) {\n      f = g.expand(f), delete a[d];\n\n      for (c in f) c in a || (a[c] = f[c], b[c] = e);\n    } else b[d] = e;\n  }\n\n  function kb(a, b, c) {\n    var d,\n        e,\n        f = 0,\n        g = kb.prefilters.length,\n        h = r.Deferred().always(function () {\n      delete i.elem;\n    }),\n        i = function () {\n      if (e) return !1;\n\n      for (var b = ab || fb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; g < i; g++) j.tweens[g].run(f);\n\n      return h.notifyWith(a, [j, f, c]), f < 1 && i ? c : (i || h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j]), !1);\n    },\n        j = h.promise({\n      elem: a,\n      props: r.extend({}, b),\n      opts: r.extend(!0, {\n        specialEasing: {},\n        easing: r.easing._default\n      }, c),\n      originalProperties: b,\n      originalOptions: c,\n      startTime: ab || fb(),\n      duration: c.duration,\n      tweens: [],\n      createTween: function (b, c) {\n        var d = r.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);\n        return j.tweens.push(d), d;\n      },\n      stop: function (b) {\n        var c = 0,\n            d = b ? j.tweens.length : 0;\n        if (e) return this;\n\n        for (e = !0; c < d; c++) j.tweens[c].run(1);\n\n        return b ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b])) : h.rejectWith(a, [j, b]), this;\n      }\n    }),\n        k = j.props;\n\n    for (jb(k, j.opts.specialEasing); f < g; f++) if (d = kb.prefilters[f].call(j, a, k, j.opts)) return r.isFunction(d.stop) && (r._queueHooks(j.elem, j.opts.queue).stop = r.proxy(d.stop, d)), d;\n\n    return r.map(k, hb, j), r.isFunction(j.opts.start) && j.opts.start.call(a, j), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always), r.fx.timer(r.extend(i, {\n      elem: a,\n      anim: j,\n      queue: j.opts.queue\n    })), j;\n  }\n\n  r.Animation = r.extend(kb, {\n    tweeners: {\n      \"*\": [function (a, b) {\n        var c = this.createTween(a, b);\n        return fa(c.elem, a, ba.exec(b), c), c;\n      }]\n    },\n    tweener: function (a, b) {\n      r.isFunction(a) ? (b = a, a = [\"*\"]) : a = a.match(L);\n\n      for (var c, d = 0, e = a.length; d < e; d++) c = a[d], kb.tweeners[c] = kb.tweeners[c] || [], kb.tweeners[c].unshift(b);\n    },\n    prefilters: [ib],\n    prefilter: function (a, b) {\n      b ? kb.prefilters.unshift(a) : kb.prefilters.push(a);\n    }\n  }), r.speed = function (a, b, c) {\n    var d = a && \"object\" == typeof a ? r.extend({}, a) : {\n      complete: c || !c && b || r.isFunction(a) && a,\n      duration: a,\n      easing: c && b || b && !r.isFunction(b) && b\n    };\n    return r.fx.off ? d.duration = 0 : \"number\" != typeof d.duration && (d.duration in r.fx.speeds ? d.duration = r.fx.speeds[d.duration] : d.duration = r.fx.speeds._default), null != d.queue && d.queue !== !0 || (d.queue = \"fx\"), d.old = d.complete, d.complete = function () {\n      r.isFunction(d.old) && d.old.call(this), d.queue && r.dequeue(this, d.queue);\n    }, d;\n  }, r.fn.extend({\n    fadeTo: function (a, b, c, d) {\n      return this.filter(da).css(\"opacity\", 0).show().end().animate({\n        opacity: b\n      }, a, c, d);\n    },\n    animate: function (a, b, c, d) {\n      var e = r.isEmptyObject(a),\n          f = r.speed(b, c, d),\n          g = function () {\n        var b = kb(this, r.extend({}, a), f);\n        (e || W.get(this, \"finish\")) && b.stop(!0);\n      };\n\n      return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);\n    },\n    stop: function (a, b, c) {\n      var d = function (a) {\n        var b = a.stop;\n        delete a.stop, b(c);\n      };\n\n      return \"string\" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || \"fx\", []), this.each(function () {\n        var b = !0,\n            e = null != a && a + \"queueHooks\",\n            f = r.timers,\n            g = W.get(this);\n        if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) g[e] && g[e].stop && db.test(e) && d(g[e]);\n\n        for (e = f.length; e--;) f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));\n\n        !b && c || r.dequeue(this, a);\n      });\n    },\n    finish: function (a) {\n      return a !== !1 && (a = a || \"fx\"), this.each(function () {\n        var b,\n            c = W.get(this),\n            d = c[a + \"queue\"],\n            e = c[a + \"queueHooks\"],\n            f = r.timers,\n            g = d ? d.length : 0;\n\n        for (c.finish = !0, r.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));\n\n        for (b = 0; b < g; b++) d[b] && d[b].finish && d[b].finish.call(this);\n\n        delete c.finish;\n      });\n    }\n  }), r.each([\"toggle\", \"show\", \"hide\"], function (a, b) {\n    var c = r.fn[b];\n\n    r.fn[b] = function (a, d, e) {\n      return null == a || \"boolean\" == typeof a ? c.apply(this, arguments) : this.animate(gb(b, !0), a, d, e);\n    };\n  }), r.each({\n    slideDown: gb(\"show\"),\n    slideUp: gb(\"hide\"),\n    slideToggle: gb(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (a, b) {\n    r.fn[a] = function (a, c, d) {\n      return this.animate(b, a, c, d);\n    };\n  }), r.timers = [], r.fx.tick = function () {\n    var a,\n        b = 0,\n        c = r.timers;\n\n    for (ab = r.now(); b < c.length; b++) a = c[b], a() || c[b] !== a || c.splice(b--, 1);\n\n    c.length || r.fx.stop(), ab = void 0;\n  }, r.fx.timer = function (a) {\n    r.timers.push(a), r.fx.start();\n  }, r.fx.interval = 13, r.fx.start = function () {\n    bb || (bb = !0, eb());\n  }, r.fx.stop = function () {\n    bb = null;\n  }, r.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    _default: 400\n  }, r.fn.delay = function (b, c) {\n    return b = r.fx ? r.fx.speeds[b] || b : b, c = c || \"fx\", this.queue(c, function (c, d) {\n      var e = a.setTimeout(c, b);\n\n      d.stop = function () {\n        a.clearTimeout(e);\n      };\n    });\n  }, function () {\n    var a = d.createElement(\"input\"),\n        b = d.createElement(\"select\"),\n        c = b.appendChild(d.createElement(\"option\"));\n    a.type = \"checkbox\", o.checkOn = \"\" !== a.value, o.optSelected = c.selected, a = d.createElement(\"input\"), a.value = \"t\", a.type = \"radio\", o.radioValue = \"t\" === a.value;\n  }();\n  var lb,\n      mb = r.expr.attrHandle;\n  r.fn.extend({\n    attr: function (a, b) {\n      return T(this, r.attr, a, b, arguments.length > 1);\n    },\n    removeAttr: function (a) {\n      return this.each(function () {\n        r.removeAttr(this, a);\n      });\n    }\n  }), r.extend({\n    attr: function (a, b, c) {\n      var d,\n          e,\n          f = a.nodeType;\n      if (3 !== f && 8 !== f && 2 !== f) return \"undefined\" == typeof a.getAttribute ? r.prop(a, b, c) : (1 === f && r.isXMLDoc(a) || (e = r.attrHooks[b.toLowerCase()] || (r.expr.match.bool.test(b) ? lb : void 0)), void 0 !== c ? null === c ? void r.removeAttr(a, b) : e && \"set\" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + \"\"), c) : e && \"get\" in e && null !== (d = e.get(a, b)) ? d : (d = r.find.attr(a, b), null == d ? void 0 : d));\n    },\n    attrHooks: {\n      type: {\n        set: function (a, b) {\n          if (!o.radioValue && \"radio\" === b && B(a, \"input\")) {\n            var c = a.value;\n            return a.setAttribute(\"type\", b), c && (a.value = c), b;\n          }\n        }\n      }\n    },\n    removeAttr: function (a, b) {\n      var c,\n          d = 0,\n          e = b && b.match(L);\n      if (e && 1 === a.nodeType) while (c = e[d++]) a.removeAttribute(c);\n    }\n  }), lb = {\n    set: function (a, b, c) {\n      return b === !1 ? r.removeAttr(a, c) : a.setAttribute(c, c), c;\n    }\n  }, r.each(r.expr.match.bool.source.match(/\\w+/g), function (a, b) {\n    var c = mb[b] || r.find.attr;\n\n    mb[b] = function (a, b, d) {\n      var e,\n          f,\n          g = b.toLowerCase();\n      return d || (f = mb[g], mb[g] = e, e = null != c(a, b, d) ? g : null, mb[g] = f), e;\n    };\n  });\n  var nb = /^(?:input|select|textarea|button)$/i,\n      ob = /^(?:a|area)$/i;\n  r.fn.extend({\n    prop: function (a, b) {\n      return T(this, r.prop, a, b, arguments.length > 1);\n    },\n    removeProp: function (a) {\n      return this.each(function () {\n        delete this[r.propFix[a] || a];\n      });\n    }\n  }), r.extend({\n    prop: function (a, b, c) {\n      var d,\n          e,\n          f = a.nodeType;\n      if (3 !== f && 8 !== f && 2 !== f) return 1 === f && r.isXMLDoc(a) || (b = r.propFix[b] || b, e = r.propHooks[b]), void 0 !== c ? e && \"set\" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && \"get\" in e && null !== (d = e.get(a, b)) ? d : a[b];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function (a) {\n          var b = r.find.attr(a, \"tabindex\");\n          return b ? parseInt(b, 10) : nb.test(a.nodeName) || ob.test(a.nodeName) && a.href ? 0 : -1;\n        }\n      }\n    },\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    }\n  }), o.optSelected || (r.propHooks.selected = {\n    get: function (a) {\n      var b = a.parentNode;\n      return b && b.parentNode && b.parentNode.selectedIndex, null;\n    },\n    set: function (a) {\n      var b = a.parentNode;\n      b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);\n    }\n  }), r.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    r.propFix[this.toLowerCase()] = this;\n  });\n\n  function pb(a) {\n    var b = a.match(L) || [];\n    return b.join(\" \");\n  }\n\n  function qb(a) {\n    return a.getAttribute && a.getAttribute(\"class\") || \"\";\n  }\n\n  r.fn.extend({\n    addClass: function (a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i = 0;\n      if (r.isFunction(a)) return this.each(function (b) {\n        r(this).addClass(a.call(this, b, qb(this)));\n      });\n\n      if (\"string\" == typeof a && a) {\n        b = a.match(L) || [];\n\n        while (c = this[i++]) if (e = qb(c), d = 1 === c.nodeType && \" \" + pb(e) + \" \") {\n          g = 0;\n\n          while (f = b[g++]) d.indexOf(\" \" + f + \" \") < 0 && (d += f + \" \");\n\n          h = pb(d), e !== h && c.setAttribute(\"class\", h);\n        }\n      }\n\n      return this;\n    },\n    removeClass: function (a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i = 0;\n      if (r.isFunction(a)) return this.each(function (b) {\n        r(this).removeClass(a.call(this, b, qb(this)));\n      });\n      if (!arguments.length) return this.attr(\"class\", \"\");\n\n      if (\"string\" == typeof a && a) {\n        b = a.match(L) || [];\n\n        while (c = this[i++]) if (e = qb(c), d = 1 === c.nodeType && \" \" + pb(e) + \" \") {\n          g = 0;\n\n          while (f = b[g++]) while (d.indexOf(\" \" + f + \" \") > -1) d = d.replace(\" \" + f + \" \", \" \");\n\n          h = pb(d), e !== h && c.setAttribute(\"class\", h);\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function (a, b) {\n      var c = typeof a;\n      return \"boolean\" == typeof b && \"string\" === c ? b ? this.addClass(a) : this.removeClass(a) : r.isFunction(a) ? this.each(function (c) {\n        r(this).toggleClass(a.call(this, c, qb(this), b), b);\n      }) : this.each(function () {\n        var b, d, e, f;\n\n        if (\"string\" === c) {\n          d = 0, e = r(this), f = a.match(L) || [];\n\n          while (b = f[d++]) e.hasClass(b) ? e.removeClass(b) : e.addClass(b);\n        } else void 0 !== a && \"boolean\" !== c || (b = qb(this), b && W.set(this, \"__className__\", b), this.setAttribute && this.setAttribute(\"class\", b || a === !1 ? \"\" : W.get(this, \"__className__\") || \"\"));\n      });\n    },\n    hasClass: function (a) {\n      var b,\n          c,\n          d = 0;\n      b = \" \" + a + \" \";\n\n      while (c = this[d++]) if (1 === c.nodeType && (\" \" + pb(qb(c)) + \" \").indexOf(b) > -1) return !0;\n\n      return !1;\n    }\n  });\n  var rb = /\\r/g;\n  r.fn.extend({\n    val: function (a) {\n      var b,\n          c,\n          d,\n          e = this[0];\n      {\n        if (arguments.length) return d = r.isFunction(a), this.each(function (c) {\n          var e;\n          1 === this.nodeType && (e = d ? a.call(this, c, r(this).val()) : a, null == e ? e = \"\" : \"number\" == typeof e ? e += \"\" : Array.isArray(e) && (e = r.map(e, function (a) {\n            return null == a ? \"\" : a + \"\";\n          })), b = r.valHooks[this.type] || r.valHooks[this.nodeName.toLowerCase()], b && \"set\" in b && void 0 !== b.set(this, e, \"value\") || (this.value = e));\n        });\n        if (e) return b = r.valHooks[e.type] || r.valHooks[e.nodeName.toLowerCase()], b && \"get\" in b && void 0 !== (c = b.get(e, \"value\")) ? c : (c = e.value, \"string\" == typeof c ? c.replace(rb, \"\") : null == c ? \"\" : c);\n      }\n    }\n  }), r.extend({\n    valHooks: {\n      option: {\n        get: function (a) {\n          var b = r.find.attr(a, \"value\");\n          return null != b ? b : pb(r.text(a));\n        }\n      },\n      select: {\n        get: function (a) {\n          var b,\n              c,\n              d,\n              e = a.options,\n              f = a.selectedIndex,\n              g = \"select-one\" === a.type,\n              h = g ? null : [],\n              i = g ? f + 1 : e.length;\n\n          for (d = f < 0 ? i : g ? f : 0; d < i; d++) if (c = e[d], (c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !B(c.parentNode, \"optgroup\"))) {\n            if (b = r(c).val(), g) return b;\n            h.push(b);\n          }\n\n          return h;\n        },\n        set: function (a, b) {\n          var c,\n              d,\n              e = a.options,\n              f = r.makeArray(b),\n              g = e.length;\n\n          while (g--) d = e[g], (d.selected = r.inArray(r.valHooks.option.get(d), f) > -1) && (c = !0);\n\n          return c || (a.selectedIndex = -1), f;\n        }\n      }\n    }\n  }), r.each([\"radio\", \"checkbox\"], function () {\n    r.valHooks[this] = {\n      set: function (a, b) {\n        if (Array.isArray(b)) return a.checked = r.inArray(r(a).val(), b) > -1;\n      }\n    }, o.checkOn || (r.valHooks[this].get = function (a) {\n      return null === a.getAttribute(\"value\") ? \"on\" : a.value;\n    });\n  });\n  var sb = /^(?:focusinfocus|focusoutblur)$/;\n  r.extend(r.event, {\n    trigger: function (b, c, e, f) {\n      var g,\n          h,\n          i,\n          j,\n          k,\n          m,\n          n,\n          o = [e || d],\n          p = l.call(b, \"type\") ? b.type : b,\n          q = l.call(b, \"namespace\") ? b.namespace.split(\".\") : [];\n\n      if (h = i = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !sb.test(p + r.event.triggered) && (p.indexOf(\".\") > -1 && (q = p.split(\".\"), p = q.shift(), q.sort()), k = p.indexOf(\":\") < 0 && \"on\" + p, b = b[r.expando] ? b : new r.Event(p, \"object\" == typeof b && b), b.isTrigger = f ? 2 : 3, b.namespace = q.join(\".\"), b.rnamespace = b.namespace ? new RegExp(\"(^|\\\\.)\" + q.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : r.makeArray(c, [b]), n = r.event.special[p] || {}, f || !n.trigger || n.trigger.apply(e, c) !== !1)) {\n        if (!f && !n.noBubble && !r.isWindow(e)) {\n          for (j = n.delegateType || p, sb.test(j + p) || (h = h.parentNode); h; h = h.parentNode) o.push(h), i = h;\n\n          i === (e.ownerDocument || d) && o.push(i.defaultView || i.parentWindow || a);\n        }\n\n        g = 0;\n\n        while ((h = o[g++]) && !b.isPropagationStopped()) b.type = g > 1 ? j : n.bindType || p, m = (W.get(h, \"events\") || {})[b.type] && W.get(h, \"handle\"), m && m.apply(h, c), m = k && h[k], m && m.apply && U(h) && (b.result = m.apply(h, c), b.result === !1 && b.preventDefault());\n\n        return b.type = p, f || b.isDefaultPrevented() || n._default && n._default.apply(o.pop(), c) !== !1 || !U(e) || k && r.isFunction(e[p]) && !r.isWindow(e) && (i = e[k], i && (e[k] = null), r.event.triggered = p, e[p](), r.event.triggered = void 0, i && (e[k] = i)), b.result;\n      }\n    },\n    simulate: function (a, b, c) {\n      var d = r.extend(new r.Event(), c, {\n        type: a,\n        isSimulated: !0\n      });\n      r.event.trigger(d, null, b);\n    }\n  }), r.fn.extend({\n    trigger: function (a, b) {\n      return this.each(function () {\n        r.event.trigger(a, b, this);\n      });\n    },\n    triggerHandler: function (a, b) {\n      var c = this[0];\n      if (c) return r.event.trigger(a, b, c, !0);\n    }\n  }), r.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"), function (a, b) {\n    r.fn[b] = function (a, c) {\n      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);\n    };\n  }), r.fn.extend({\n    hover: function (a, b) {\n      return this.mouseenter(a).mouseleave(b || a);\n    }\n  }), o.focusin = \"onfocusin\" in a, o.focusin || r.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (a, b) {\n    var c = function (a) {\n      r.event.simulate(b, a.target, r.event.fix(a));\n    };\n\n    r.event.special[b] = {\n      setup: function () {\n        var d = this.ownerDocument || this,\n            e = W.access(d, b);\n        e || d.addEventListener(a, c, !0), W.access(d, b, (e || 0) + 1);\n      },\n      teardown: function () {\n        var d = this.ownerDocument || this,\n            e = W.access(d, b) - 1;\n        e ? W.access(d, b, e) : (d.removeEventListener(a, c, !0), W.remove(d, b));\n      }\n    };\n  });\n  var tb = a.location,\n      ub = r.now(),\n      vb = /\\?/;\n\n  r.parseXML = function (b) {\n    var c;\n    if (!b || \"string\" != typeof b) return null;\n\n    try {\n      c = new a.DOMParser().parseFromString(b, \"text/xml\");\n    } catch (d) {\n      c = void 0;\n    }\n\n    return c && !c.getElementsByTagName(\"parsererror\").length || r.error(\"Invalid XML: \" + b), c;\n  };\n\n  var wb = /\\[\\]$/,\n      xb = /\\r?\\n/g,\n      yb = /^(?:submit|button|image|reset|file)$/i,\n      zb = /^(?:input|select|textarea|keygen)/i;\n\n  function Ab(a, b, c, d) {\n    var e;\n    if (Array.isArray(b)) r.each(b, function (b, e) {\n      c || wb.test(a) ? d(a, e) : Ab(a + \"[\" + (\"object\" == typeof e && null != e ? b : \"\") + \"]\", e, c, d);\n    });else if (c || \"object\" !== r.type(b)) d(a, b);else for (e in b) Ab(a + \"[\" + e + \"]\", b[e], c, d);\n  }\n\n  r.param = function (a, b) {\n    var c,\n        d = [],\n        e = function (a, b) {\n      var c = r.isFunction(b) ? b() : b;\n      d[d.length] = encodeURIComponent(a) + \"=\" + encodeURIComponent(null == c ? \"\" : c);\n    };\n\n    if (Array.isArray(a) || a.jquery && !r.isPlainObject(a)) r.each(a, function () {\n      e(this.name, this.value);\n    });else for (c in a) Ab(c, a[c], b, e);\n    return d.join(\"&\");\n  }, r.fn.extend({\n    serialize: function () {\n      return r.param(this.serializeArray());\n    },\n    serializeArray: function () {\n      return this.map(function () {\n        var a = r.prop(this, \"elements\");\n        return a ? r.makeArray(a) : this;\n      }).filter(function () {\n        var a = this.type;\n        return this.name && !r(this).is(\":disabled\") && zb.test(this.nodeName) && !yb.test(a) && (this.checked || !ja.test(a));\n      }).map(function (a, b) {\n        var c = r(this).val();\n        return null == c ? null : Array.isArray(c) ? r.map(c, function (a) {\n          return {\n            name: b.name,\n            value: a.replace(xb, \"\\r\\n\")\n          };\n        }) : {\n          name: b.name,\n          value: c.replace(xb, \"\\r\\n\")\n        };\n      }).get();\n    }\n  });\n  var Bb = /%20/g,\n      Cb = /#.*$/,\n      Db = /([?&])_=[^&]*/,\n      Eb = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm,\n      Fb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      Gb = /^(?:GET|HEAD)$/,\n      Hb = /^\\/\\//,\n      Ib = {},\n      Jb = {},\n      Kb = \"*/\".concat(\"*\"),\n      Lb = d.createElement(\"a\");\n  Lb.href = tb.href;\n\n  function Mb(a) {\n    return function (b, c) {\n      \"string\" != typeof b && (c = b, b = \"*\");\n      var d,\n          e = 0,\n          f = b.toLowerCase().match(L) || [];\n      if (r.isFunction(c)) while (d = f[e++]) \"+\" === d[0] ? (d = d.slice(1) || \"*\", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);\n    };\n  }\n\n  function Nb(a, b, c, d) {\n    var e = {},\n        f = a === Jb;\n\n    function g(h) {\n      var i;\n      return e[h] = !0, r.each(a[h] || [], function (a, h) {\n        var j = h(b, c, d);\n        return \"string\" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);\n      }), i;\n    }\n\n    return g(b.dataTypes[0]) || !e[\"*\"] && g(\"*\");\n  }\n\n  function Ob(a, b) {\n    var c,\n        d,\n        e = r.ajaxSettings.flatOptions || {};\n\n    for (c in b) void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);\n\n    return d && r.extend(!0, a, d), a;\n  }\n\n  function Pb(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.contents,\n        i = a.dataTypes;\n\n    while (\"*\" === i[0]) i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader(\"Content-Type\"));\n\n    if (d) for (e in h) if (h[e] && h[e].test(d)) {\n      i.unshift(e);\n      break;\n    }\n    if (i[0] in c) f = i[0];else {\n      for (e in c) {\n        if (!i[0] || a.converters[e + \" \" + i[0]]) {\n          f = e;\n          break;\n        }\n\n        g || (g = e);\n      }\n\n      f = f || g;\n    }\n    if (f) return f !== i[0] && i.unshift(f), c[f];\n  }\n\n  function Qb(a, b, c, d) {\n    var e,\n        f,\n        g,\n        h,\n        i,\n        j = {},\n        k = a.dataTypes.slice();\n    if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g];\n    f = k.shift();\n\n    while (f) if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if (\"*\" === f) f = i;else if (\"*\" !== i && i !== f) {\n      if (g = j[i + \" \" + f] || j[\"* \" + f], !g) for (e in j) if (h = e.split(\" \"), h[1] === f && (g = j[i + \" \" + h[0]] || j[\"* \" + h[0]])) {\n        g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));\n        break;\n      }\n      if (g !== !0) if (g && a[\"throws\"]) b = g(b);else try {\n        b = g(b);\n      } catch (l) {\n        return {\n          state: \"parsererror\",\n          error: g ? l : \"No conversion from \" + i + \" to \" + f\n        };\n      }\n    }\n\n    return {\n      state: \"success\",\n      data: b\n    };\n  }\n\n  r.extend({\n    active: 0,\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: tb.href,\n      type: \"GET\",\n      isLocal: Fb.test(tb.protocol),\n      global: !0,\n      processData: !0,\n      async: !0,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      accepts: {\n        \"*\": Kb,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      converters: {\n        \"* text\": String,\n        \"text html\": !0,\n        \"text json\": JSON.parse,\n        \"text xml\": r.parseXML\n      },\n      flatOptions: {\n        url: !0,\n        context: !0\n      }\n    },\n    ajaxSetup: function (a, b) {\n      return b ? Ob(Ob(a, r.ajaxSettings), b) : Ob(r.ajaxSettings, a);\n    },\n    ajaxPrefilter: Mb(Ib),\n    ajaxTransport: Mb(Jb),\n    ajax: function (b, c) {\n      \"object\" == typeof b && (c = b, b = void 0), c = c || {};\n      var e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          n,\n          o = r.ajaxSetup({}, c),\n          p = o.context || o,\n          q = o.context && (p.nodeType || p.jquery) ? r(p) : r.event,\n          s = r.Deferred(),\n          t = r.Callbacks(\"once memory\"),\n          u = o.statusCode || {},\n          v = {},\n          w = {},\n          x = \"canceled\",\n          y = {\n        readyState: 0,\n        getResponseHeader: function (a) {\n          var b;\n\n          if (k) {\n            if (!h) {\n              h = {};\n\n              while (b = Eb.exec(g)) h[b[1].toLowerCase()] = b[2];\n            }\n\n            b = h[a.toLowerCase()];\n          }\n\n          return null == b ? null : b;\n        },\n        getAllResponseHeaders: function () {\n          return k ? g : null;\n        },\n        setRequestHeader: function (a, b) {\n          return null == k && (a = w[a.toLowerCase()] = w[a.toLowerCase()] || a, v[a] = b), this;\n        },\n        overrideMimeType: function (a) {\n          return null == k && (o.mimeType = a), this;\n        },\n        statusCode: function (a) {\n          var b;\n          if (a) if (k) y.always(a[y.status]);else for (b in a) u[b] = [u[b], a[b]];\n          return this;\n        },\n        abort: function (a) {\n          var b = a || x;\n          return e && e.abort(b), A(0, b), this;\n        }\n      };\n\n      if (s.promise(y), o.url = ((b || o.url || tb.href) + \"\").replace(Hb, tb.protocol + \"//\"), o.type = c.method || c.type || o.method || o.type, o.dataTypes = (o.dataType || \"*\").toLowerCase().match(L) || [\"\"], null == o.crossDomain) {\n        j = d.createElement(\"a\");\n\n        try {\n          j.href = o.url, j.href = j.href, o.crossDomain = Lb.protocol + \"//\" + Lb.host != j.protocol + \"//\" + j.host;\n        } catch (z) {\n          o.crossDomain = !0;\n        }\n      }\n\n      if (o.data && o.processData && \"string\" != typeof o.data && (o.data = r.param(o.data, o.traditional)), Nb(Ib, o, c, y), k) return y;\n      l = r.event && o.global, l && 0 === r.active++ && r.event.trigger(\"ajaxStart\"), o.type = o.type.toUpperCase(), o.hasContent = !Gb.test(o.type), f = o.url.replace(Cb, \"\"), o.hasContent ? o.data && o.processData && 0 === (o.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && (o.data = o.data.replace(Bb, \"+\")) : (n = o.url.slice(f.length), o.data && (f += (vb.test(f) ? \"&\" : \"?\") + o.data, delete o.data), o.cache === !1 && (f = f.replace(Db, \"$1\"), n = (vb.test(f) ? \"&\" : \"?\") + \"_=\" + ub++ + n), o.url = f + n), o.ifModified && (r.lastModified[f] && y.setRequestHeader(\"If-Modified-Since\", r.lastModified[f]), r.etag[f] && y.setRequestHeader(\"If-None-Match\", r.etag[f])), (o.data && o.hasContent && o.contentType !== !1 || c.contentType) && y.setRequestHeader(\"Content-Type\", o.contentType), y.setRequestHeader(\"Accept\", o.dataTypes[0] && o.accepts[o.dataTypes[0]] ? o.accepts[o.dataTypes[0]] + (\"*\" !== o.dataTypes[0] ? \", \" + Kb + \"; q=0.01\" : \"\") : o.accepts[\"*\"]);\n\n      for (m in o.headers) y.setRequestHeader(m, o.headers[m]);\n\n      if (o.beforeSend && (o.beforeSend.call(p, y, o) === !1 || k)) return y.abort();\n\n      if (x = \"abort\", t.add(o.complete), y.done(o.success), y.fail(o.error), e = Nb(Jb, o, c, y)) {\n        if (y.readyState = 1, l && q.trigger(\"ajaxSend\", [y, o]), k) return y;\n        o.async && o.timeout > 0 && (i = a.setTimeout(function () {\n          y.abort(\"timeout\");\n        }, o.timeout));\n\n        try {\n          k = !1, e.send(v, A);\n        } catch (z) {\n          if (k) throw z;\n          A(-1, z);\n        }\n      } else A(-1, \"No Transport\");\n\n      function A(b, c, d, h) {\n        var j,\n            m,\n            n,\n            v,\n            w,\n            x = c;\n        k || (k = !0, i && a.clearTimeout(i), e = void 0, g = h || \"\", y.readyState = b > 0 ? 4 : 0, j = b >= 200 && b < 300 || 304 === b, d && (v = Pb(o, y, d)), v = Qb(o, v, y, j), j ? (o.ifModified && (w = y.getResponseHeader(\"Last-Modified\"), w && (r.lastModified[f] = w), w = y.getResponseHeader(\"etag\"), w && (r.etag[f] = w)), 204 === b || \"HEAD\" === o.type ? x = \"nocontent\" : 304 === b ? x = \"notmodified\" : (x = v.state, m = v.data, n = v.error, j = !n)) : (n = x, !b && x || (x = \"error\", b < 0 && (b = 0))), y.status = b, y.statusText = (c || x) + \"\", j ? s.resolveWith(p, [m, x, y]) : s.rejectWith(p, [y, x, n]), y.statusCode(u), u = void 0, l && q.trigger(j ? \"ajaxSuccess\" : \"ajaxError\", [y, o, j ? m : n]), t.fireWith(p, [y, x]), l && (q.trigger(\"ajaxComplete\", [y, o]), --r.active || r.event.trigger(\"ajaxStop\")));\n      }\n\n      return y;\n    },\n    getJSON: function (a, b, c) {\n      return r.get(a, b, c, \"json\");\n    },\n    getScript: function (a, b) {\n      return r.get(a, void 0, b, \"script\");\n    }\n  }), r.each([\"get\", \"post\"], function (a, b) {\n    r[b] = function (a, c, d, e) {\n      return r.isFunction(c) && (e = e || d, d = c, c = void 0), r.ajax(r.extend({\n        url: a,\n        type: b,\n        dataType: e,\n        data: c,\n        success: d\n      }, r.isPlainObject(a) && a));\n    };\n  }), r._evalUrl = function (a) {\n    return r.ajax({\n      url: a,\n      type: \"GET\",\n      dataType: \"script\",\n      cache: !0,\n      async: !1,\n      global: !1,\n      \"throws\": !0\n    });\n  }, r.fn.extend({\n    wrapAll: function (a) {\n      var b;\n      return this[0] && (r.isFunction(a) && (a = a.call(this[0])), b = r(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {\n        var a = this;\n\n        while (a.firstElementChild) a = a.firstElementChild;\n\n        return a;\n      }).append(this)), this;\n    },\n    wrapInner: function (a) {\n      return r.isFunction(a) ? this.each(function (b) {\n        r(this).wrapInner(a.call(this, b));\n      }) : this.each(function () {\n        var b = r(this),\n            c = b.contents();\n        c.length ? c.wrapAll(a) : b.append(a);\n      });\n    },\n    wrap: function (a) {\n      var b = r.isFunction(a);\n      return this.each(function (c) {\n        r(this).wrapAll(b ? a.call(this, c) : a);\n      });\n    },\n    unwrap: function (a) {\n      return this.parent(a).not(\"body\").each(function () {\n        r(this).replaceWith(this.childNodes);\n      }), this;\n    }\n  }), r.expr.pseudos.hidden = function (a) {\n    return !r.expr.pseudos.visible(a);\n  }, r.expr.pseudos.visible = function (a) {\n    return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length);\n  }, r.ajaxSettings.xhr = function () {\n    try {\n      return new a.XMLHttpRequest();\n    } catch (b) {}\n  };\n  var Rb = {\n    0: 200,\n    1223: 204\n  },\n      Sb = r.ajaxSettings.xhr();\n  o.cors = !!Sb && \"withCredentials\" in Sb, o.ajax = Sb = !!Sb, r.ajaxTransport(function (b) {\n    var c, d;\n    if (o.cors || Sb && !b.crossDomain) return {\n      send: function (e, f) {\n        var g,\n            h = b.xhr();\n        if (h.open(b.type, b.url, b.async, b.username, b.password), b.xhrFields) for (g in b.xhrFields) h[g] = b.xhrFields[g];\n        b.mimeType && h.overrideMimeType && h.overrideMimeType(b.mimeType), b.crossDomain || e[\"X-Requested-With\"] || (e[\"X-Requested-With\"] = \"XMLHttpRequest\");\n\n        for (g in e) h.setRequestHeader(g, e[g]);\n\n        c = function (a) {\n          return function () {\n            c && (c = d = h.onload = h.onerror = h.onabort = h.onreadystatechange = null, \"abort\" === a ? h.abort() : \"error\" === a ? \"number\" != typeof h.status ? f(0, \"error\") : f(h.status, h.statusText) : f(Rb[h.status] || h.status, h.statusText, \"text\" !== (h.responseType || \"text\") || \"string\" != typeof h.responseText ? {\n              binary: h.response\n            } : {\n              text: h.responseText\n            }, h.getAllResponseHeaders()));\n          };\n        }, h.onload = c(), d = h.onerror = c(\"error\"), void 0 !== h.onabort ? h.onabort = d : h.onreadystatechange = function () {\n          4 === h.readyState && a.setTimeout(function () {\n            c && d();\n          });\n        }, c = c(\"abort\");\n\n        try {\n          h.send(b.hasContent && b.data || null);\n        } catch (i) {\n          if (c) throw i;\n        }\n      },\n      abort: function () {\n        c && c();\n      }\n    };\n  }), r.ajaxPrefilter(function (a) {\n    a.crossDomain && (a.contents.script = !1);\n  }), r.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      \"text script\": function (a) {\n        return r.globalEval(a), a;\n      }\n    }\n  }), r.ajaxPrefilter(\"script\", function (a) {\n    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = \"GET\");\n  }), r.ajaxTransport(\"script\", function (a) {\n    if (a.crossDomain) {\n      var b, c;\n      return {\n        send: function (e, f) {\n          b = r(\"<script>\").prop({\n            charset: a.scriptCharset,\n            src: a.url\n          }).on(\"load error\", c = function (a) {\n            b.remove(), c = null, a && f(\"error\" === a.type ? 404 : 200, a.type);\n          }), d.head.appendChild(b[0]);\n        },\n        abort: function () {\n          c && c();\n        }\n      };\n    }\n  });\n  var Tb = [],\n      Ub = /(=)\\?(?=&|$)|\\?\\?/;\n  r.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function () {\n      var a = Tb.pop() || r.expando + \"_\" + ub++;\n      return this[a] = !0, a;\n    }\n  }), r.ajaxPrefilter(\"json jsonp\", function (b, c, d) {\n    var e,\n        f,\n        g,\n        h = b.jsonp !== !1 && (Ub.test(b.url) ? \"url\" : \"string\" == typeof b.data && 0 === (b.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && Ub.test(b.data) && \"data\");\n    if (h || \"jsonp\" === b.dataTypes[0]) return e = b.jsonpCallback = r.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Ub, \"$1\" + e) : b.jsonp !== !1 && (b.url += (vb.test(b.url) ? \"&\" : \"?\") + b.jsonp + \"=\" + e), b.converters[\"script json\"] = function () {\n      return g || r.error(e + \" was not called\"), g[0];\n    }, b.dataTypes[0] = \"json\", f = a[e], a[e] = function () {\n      g = arguments;\n    }, d.always(function () {\n      void 0 === f ? r(a).removeProp(e) : a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Tb.push(e)), g && r.isFunction(f) && f(g[0]), g = f = void 0;\n    }), \"script\";\n  }), o.createHTMLDocument = function () {\n    var a = d.implementation.createHTMLDocument(\"\").body;\n    return a.innerHTML = \"<form></form><form></form>\", 2 === a.childNodes.length;\n  }(), r.parseHTML = function (a, b, c) {\n    if (\"string\" != typeof a) return [];\n    \"boolean\" == typeof b && (c = b, b = !1);\n    var e, f, g;\n    return b || (o.createHTMLDocument ? (b = d.implementation.createHTMLDocument(\"\"), e = b.createElement(\"base\"), e.href = d.location.href, b.head.appendChild(e)) : b = d), f = C.exec(a), g = !c && [], f ? [b.createElement(f[1])] : (f = qa([a], b, g), g && g.length && r(g).remove(), r.merge([], f.childNodes));\n  }, r.fn.load = function (a, b, c) {\n    var d,\n        e,\n        f,\n        g = this,\n        h = a.indexOf(\" \");\n    return h > -1 && (d = pb(a.slice(h)), a = a.slice(0, h)), r.isFunction(b) ? (c = b, b = void 0) : b && \"object\" == typeof b && (e = \"POST\"), g.length > 0 && r.ajax({\n      url: a,\n      type: e || \"GET\",\n      dataType: \"html\",\n      data: b\n    }).done(function (a) {\n      f = arguments, g.html(d ? r(\"<div>\").append(r.parseHTML(a)).find(d) : a);\n    }).always(c && function (a, b) {\n      g.each(function () {\n        c.apply(this, f || [a.responseText, b, a]);\n      });\n    }), this;\n  }, r.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (a, b) {\n    r.fn[b] = function (a) {\n      return this.on(b, a);\n    };\n  }), r.expr.pseudos.animated = function (a) {\n    return r.grep(r.timers, function (b) {\n      return a === b.elem;\n    }).length;\n  }, r.offset = {\n    setOffset: function (a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = r.css(a, \"position\"),\n          l = r(a),\n          m = {};\n      \"static\" === k && (a.style.position = \"relative\"), h = l.offset(), f = r.css(a, \"top\"), i = r.css(a, \"left\"), j = (\"absolute\" === k || \"fixed\" === k) && (f + i).indexOf(\"auto\") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), r.isFunction(b) && (b = b.call(a, c, r.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), \"using\" in b ? b.using.call(a, m) : l.css(m);\n    }\n  }, r.fn.extend({\n    offset: function (a) {\n      if (arguments.length) return void 0 === a ? this : this.each(function (b) {\n        r.offset.setOffset(this, a, b);\n      });\n      var b,\n          c,\n          d,\n          e,\n          f = this[0];\n      if (f) return f.getClientRects().length ? (d = f.getBoundingClientRect(), b = f.ownerDocument, c = b.documentElement, e = b.defaultView, {\n        top: d.top + e.pageYOffset - c.clientTop,\n        left: d.left + e.pageXOffset - c.clientLeft\n      }) : {\n        top: 0,\n        left: 0\n      };\n    },\n    position: function () {\n      if (this[0]) {\n        var a,\n            b,\n            c = this[0],\n            d = {\n          top: 0,\n          left: 0\n        };\n        return \"fixed\" === r.css(c, \"position\") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), B(a[0], \"html\") || (d = a.offset()), d = {\n          top: d.top + r.css(a[0], \"borderTopWidth\", !0),\n          left: d.left + r.css(a[0], \"borderLeftWidth\", !0)\n        }), {\n          top: b.top - d.top - r.css(c, \"marginTop\", !0),\n          left: b.left - d.left - r.css(c, \"marginLeft\", !0)\n        };\n      }\n    },\n    offsetParent: function () {\n      return this.map(function () {\n        var a = this.offsetParent;\n\n        while (a && \"static\" === r.css(a, \"position\")) a = a.offsetParent;\n\n        return a || ra;\n      });\n    }\n  }), r.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (a, b) {\n    var c = \"pageYOffset\" === b;\n\n    r.fn[a] = function (d) {\n      return T(this, function (a, d, e) {\n        var f;\n        return r.isWindow(a) ? f = a : 9 === a.nodeType && (f = a.defaultView), void 0 === e ? f ? f[b] : a[d] : void (f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e);\n      }, a, d, arguments.length);\n    };\n  }), r.each([\"top\", \"left\"], function (a, b) {\n    r.cssHooks[b] = Pa(o.pixelPosition, function (a, c) {\n      if (c) return c = Oa(a, b), Ma.test(c) ? r(a).position()[b] + \"px\" : c;\n    });\n  }), r.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (a, b) {\n    r.each({\n      padding: \"inner\" + a,\n      content: b,\n      \"\": \"outer\" + a\n    }, function (c, d) {\n      r.fn[d] = function (e, f) {\n        var g = arguments.length && (c || \"boolean\" != typeof e),\n            h = c || (e === !0 || f === !0 ? \"margin\" : \"border\");\n        return T(this, function (b, c, e) {\n          var f;\n          return r.isWindow(b) ? 0 === d.indexOf(\"outer\") ? b[\"inner\" + a] : b.document.documentElement[\"client\" + a] : 9 === b.nodeType ? (f = b.documentElement, Math.max(b.body[\"scroll\" + a], f[\"scroll\" + a], b.body[\"offset\" + a], f[\"offset\" + a], f[\"client\" + a])) : void 0 === e ? r.css(b, c, h) : r.style(b, c, e, h);\n        }, b, g ? e : void 0, g);\n      };\n    });\n  }), r.fn.extend({\n    bind: function (a, b, c) {\n      return this.on(a, null, b, c);\n    },\n    unbind: function (a, b) {\n      return this.off(a, null, b);\n    },\n    delegate: function (a, b, c, d) {\n      return this.on(b, a, c, d);\n    },\n    undelegate: function (a, b, c) {\n      return 1 === arguments.length ? this.off(a, \"**\") : this.off(b, a || \"**\", c);\n    }\n  }), r.holdReady = function (a) {\n    a ? r.readyWait++ : r.ready(!0);\n  }, r.isArray = Array.isArray, r.parseJSON = JSON.parse, r.nodeName = B,  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return r;\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  var Vb = a.jQuery,\n      Wb = a.$;\n  return r.noConflict = function (b) {\n    return a.$ === r && (a.$ = Wb), b && a.jQuery === r && (a.jQuery = Vb), r;\n  }, b || (a.jQuery = a.$ = r), r;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/jquery.min.js\n");

/***/ }),

/***/ "./src/NetworkManager/NetworkManager.js":
/*!**********************************************!*\
  !*** ./src/NetworkManager/NetworkManager.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"formatAxiosError\": function() { return /* binding */ formatAxiosError; },\n/* harmony export */   \"getToken\": function() { return /* binding */ getToken; },\n/* harmony export */   \"createPlusAxiosReq\": function() { return /* binding */ createPlusAxiosReq; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-cookie */ \"js-cookie\");\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_cookie__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_toastify__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _constants_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants/constant */ \"./src/constants/constant.js\");\n/* harmony import */ var _constants_constant__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_constants_constant__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _constants_APIConstant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants/APIConstant */ \"./src/constants/APIConstant.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_5__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\nlet axiosInstance = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n  baseURL: process.env.CORS\n});\nconst formatAxiosError = (err, url) => {\n  let errorMessage = \"unkwown-error\";\n  let statusCode = \"unkwown-staus-code\";\n  let headers = [];\n\n  if (err.response) {\n    // The client was given an error response (5xx, 4xx)\n    errorMessage = err.response.data;\n    statusCode = err.response.status;\n    headers = err.response.headers;\n  } else if (err.request) {\n    errorMessage = \"Network issue\";\n  } else {\n    errorMessage = err.message;\n  }\n\n  const response = {\n    errorMessage,\n    statusCode,\n    headers,\n    url\n  };\n  console.log(\"Axios Error:\", response);\n  return response;\n};\n\nconst requestHandler = request => request;\n\nconst successHandler = response => response;\n\nconst errorHandler = error => {\n  var _error$response, _error$response$data;\n\n  const errorObj = {\n    statusText: error.response && error.response.data && error.response.data.message || error.response && error.response.statusText || error.message || \"\",\n    status: error.response && error.response.status || \"na\"\n  };\n\n  if (error !== null && error !== void 0 && (_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error) {\n    let message;\n\n    if (error.response.data.error === \"Account currently locked.\") {\n      message = \"Your account has been locked due to multiple failed attempts.It will be unlocked automatically after 5 minutes.\";\n    } else {\n      message = error.response.data.error;\n    }\n\n    react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.error(message, {\n      position: react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.POSITION.TOP_CENTER\n    });\n  } else if (error && error.response && error.response.config.url.indexOf(\"pre-score\") > -1) {\n    return false;\n  } // error for message \"You cart has some issue, please correct it before proceeding\"\n  else if (error && error.response && error.response.data && error.response.data.result && error.response.data.result.code && error.response.data.status == \"FAILED\" && (error.response.data.result.code == \"1008\" || error.response.data.result.code == \"1001\" || error.response.data.result.code == \"1002\" || error.response.data.result.code == \"1009\")) {\n      react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.error(error.response.data.result.message || _constants_constant__WEBPACK_IMPORTED_MODULE_3__.GENERIC_ERROR_MSG, {\n        position: react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.POSITION.TOP_CENTER\n      });\n      const preorderProduct = window && window.sessionStorage && window.sessionStorage.getItem(\"preorderFlow\" == \"true\");\n\n      if (preorderProduct) {} else {\n        react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.error(error.response.data.result.message || _constants_constant__WEBPACK_IMPORTED_MODULE_3__.GENERIC_ERROR_MSG, {\n          position: react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.POSITION.TOP_CENTER\n        });\n        next_router__WEBPACK_IMPORTED_MODULE_5___default().push(\"/checkout/cart\", `${NetworkManager.getLangUrlPrefix()}/checkout/cart`);\n      }\n    } else if (error && error.response && error.response.data && error.response.data.status && error.response.data.status.httpStatusCode && (error.response.data.status.httpStatusCode == \"2002\" || error.response.data.status.httpStatusCode == \"2005\" || error.response.data.status.httpStatusCode == \"2007\" || error.response.data.status.httpStatusCode == \"2003\" || error.response.data.status.httpStatusCode == \"2000\")) {\n      react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.error(error.response.data.status.message || _constants_constant__WEBPACK_IMPORTED_MODULE_3__.GENERIC_ERROR_MSG, {\n        position: react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.POSITION.TOP_CENTER\n      });\n    } else if (error && error.response && error.response.data && error.response.data.status && error.response.data.status.httpStatusCode == \"400\" && error.response.data.status.errors == \"ProductIsDisabledException\") {\n      react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.error(error.response.data.status.message || _constants_constant__WEBPACK_IMPORTED_MODULE_3__.GENERIC_ERROR_MSG, {\n        position: react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.POSITION.TOP_CENTER\n      });\n    } else {\n      if (errorObj.statusText !== \"Cart Identifier Generated !\") {\n        react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.error(errorObj.statusText || _constants_constant__WEBPACK_IMPORTED_MODULE_3__.GENERIC_ERROR_MSG, {\n          position: react_toastify__WEBPACK_IMPORTED_MODULE_2__.toast.POSITION.TOP_CENTER\n        });\n      }\n    } //console.log('API Error -> ', errorObj, '\\n\\n------------------', error.config, '------------------\\n\\n')\n  //console.log('error', error.config)\n\n\n  const data = error && error.response && error.response.data;\n  return Promise.reject({\n    message: errorObj.statusText,\n    isError: true,\n    errorObj,\n    data\n  });\n}; // Axios interceptors\n\n\naxiosInstance && axiosInstance.interceptors.request.use(requestHandler);\naxiosInstance && axiosInstance.interceptors.response.use(successHandler, errorHandler);\n/**\n * Isomorphic function make sure that token is available and not expired\n * Note: fetching \"/V1/session/admin/token\" is exclusive to backend since it uses secret apiUser and password\n * @param context\n * @returns {Promise<string|undefined|*|Promise<string|undefined|*>>}\n */\n\nconst getToken = (context = null) => {\n  return context;\n};\n\nclass NetworkManager {\n  static async makeTokenHeaderParam() {\n    return {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    };\n  }\n\n  static async makeGetTokenHeaderParam(token) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      config.headers.OTCSTICKET = token;\n    }\n\n    return config;\n  }\n\n}\n\n_defineProperty(NetworkManager, \"selected\", {});\n\n_defineProperty(NetworkManager, \"makeHeaderParam\", (withToken = false) => async (context = null, extraHeaders = {}) => {\n  let token;\n\n  if (withToken) {\n    token = getToken(context);\n  }\n\n  const param = {\n    platform: \"web\"\n  };\n  const config = {\n    method: \"GET\",\n    headers: _objectSpread({\n      param: JSON.stringify(param)\n    }, extraHeaders)\n  };\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return config;\n});\n\n_defineProperty(NetworkManager, \"postDataWithUrl\", (withToken = false) => async (url, params, callback = a => a) => {\n  const header = withToken ? await NetworkManager.makeGetTokenHeaderParam() : await NetworkManager.makeTokenHeaderParam(null);\n  return axiosInstance.post(url, params, header).then(response => {\n    callback(response, null);\n    return response && response.data;\n  }).catch(error => {\n    callback(null, error);\n    return error;\n  });\n});\n\n_defineProperty(NetworkManager, \"getDataWithUrl\", (token = '') => async (url, context = null, extraHeaders = {}) => {\n  // url = url + \"&userID=\" + context.email;\n  const headers = await NetworkManager.makeGetTokenHeaderParam(token);\n  const response = await axiosInstance.get(url, headers);\n  return response.data;\n});\n\nconst createPlusAxiosReq = (endpoint, baseUrl) => {\n  let url;\n\n  const getHeader = () => NetworkManager.makeHeaderParamWishList();\n\n  const setUrl = endpointUrl => url = `${window.CORS_URL}${baseUrl}${endpointUrl ? \"/\" + endpointUrl : \"\"}`;\n\n  const withQs = url => (params = {}) => {\n    const qsString = Object.keys(params).filter(k => !!params[k]).map(k => `${k}=${params[k]}`).join(\"&\");\n    const sep = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n    return `${url}${sep}${qsString}`;\n  };\n\n  const get = async params => {\n    const headers = NetworkManager.getCustomerID() ? await getHeader() : {};\n    const response = await axios__WEBPACK_IMPORTED_MODULE_0___default().get(withQs(url)(params), headers).catch(errorHandler);\n    return response.data;\n  };\n\n  const del = async params => {\n    const headers = await getHeader();\n    const response = await axios__WEBPACK_IMPORTED_MODULE_0___default().delete(withQs(url)(params), headers).catch(errorHandler);\n    return response.data;\n  };\n\n  const post = async (bodyData, returned = \"data\") => {\n    let headers = await getHeader();\n    const response = await axios__WEBPACK_IMPORTED_MODULE_0___default().post(url, bodyData, headers).catch(errorHandler);\n    return returned === \"data\" ? response.data : response.status === 200;\n  };\n\n  const put = async bodyData => {\n    const headers = await getHeader();\n    const response = await axios__WEBPACK_IMPORTED_MODULE_0___default().put(url, bodyData, headers).catch(errorHandler);\n    return response.data;\n  };\n\n  const postCoupn = async (bodyData, returned = \"data\") => {\n    let headers = await getHeader();\n    const response = await axios__WEBPACK_IMPORTED_MODULE_0___default().post(setUrl(endpoint), {}, headers).catch(errorHandler);\n    return returned === \"data\" ? response.data : response.status === 200;\n  };\n\n  const delCoupn = async () => {\n    const headers = await getHeader();\n    const response = await axios__WEBPACK_IMPORTED_MODULE_0___default().delete(setUrl(endpoint), headers).catch(errorHandler);\n    return response.data;\n  };\n\n  setUrl(endpoint);\n  return {\n    setUrl,\n    get,\n    post,\n    del,\n    put,\n    postCoupn,\n    delCoupn\n  };\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (NetworkManager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLW5leHQvLi9zcmMvTmV0d29ya01hbmFnZXIvTmV0d29ya01hbmFnZXIuanM/OGVlZCJdLCJuYW1lcyI6WyJheGlvc0luc3RhbmNlIiwiYXhpb3MiLCJiYXNlVVJMIiwicHJvY2VzcyIsImVudiIsIkNPUlMiLCJmb3JtYXRBeGlvc0Vycm9yIiwiZXJyIiwidXJsIiwiZXJyb3JNZXNzYWdlIiwic3RhdHVzQ29kZSIsImhlYWRlcnMiLCJyZXNwb25zZSIsImRhdGEiLCJzdGF0dXMiLCJyZXF1ZXN0IiwibWVzc2FnZSIsImNvbnNvbGUiLCJsb2ciLCJyZXF1ZXN0SGFuZGxlciIsInN1Y2Nlc3NIYW5kbGVyIiwiZXJyb3JIYW5kbGVyIiwiZXJyb3IiLCJlcnJvck9iaiIsInN0YXR1c1RleHQiLCJ0b2FzdCIsInBvc2l0aW9uIiwiVE9QX0NFTlRFUiIsImNvbmZpZyIsImluZGV4T2YiLCJyZXN1bHQiLCJjb2RlIiwiQ29uc3RhbnRzIiwicHJlb3JkZXJQcm9kdWN0Iiwid2luZG93Iiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwiUm91dGVyIiwiTmV0d29ya01hbmFnZXIiLCJnZXRMYW5nVXJsUHJlZml4IiwiaHR0cFN0YXR1c0NvZGUiLCJlcnJvcnMiLCJQcm9taXNlIiwicmVqZWN0IiwiaXNFcnJvciIsImludGVyY2VwdG9ycyIsInVzZSIsImdldFRva2VuIiwiY29udGV4dCIsIm1ha2VUb2tlbkhlYWRlclBhcmFtIiwibWFrZUdldFRva2VuSGVhZGVyUGFyYW0iLCJ0b2tlbiIsIkF1dGhvcml6YXRpb24iLCJPVENTVElDS0VUIiwid2l0aFRva2VuIiwiZXh0cmFIZWFkZXJzIiwicGFyYW0iLCJwbGF0Zm9ybSIsIm1ldGhvZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJhbXMiLCJjYWxsYmFjayIsImEiLCJoZWFkZXIiLCJwb3N0IiwidGhlbiIsImNhdGNoIiwiZ2V0IiwiY3JlYXRlUGx1c0F4aW9zUmVxIiwiZW5kcG9pbnQiLCJiYXNlVXJsIiwiZ2V0SGVhZGVyIiwibWFrZUhlYWRlclBhcmFtV2lzaExpc3QiLCJzZXRVcmwiLCJlbmRwb2ludFVybCIsIkNPUlNfVVJMIiwid2l0aFFzIiwicXNTdHJpbmciLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwiayIsIm1hcCIsImpvaW4iLCJzZXAiLCJnZXRDdXN0b21lcklEIiwiZGVsIiwiYm9keURhdGEiLCJyZXR1cm5lZCIsInB1dCIsInBvc3RDb3VwbiIsImRlbENvdXBuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQSxJQUFJQSxhQUFhLEdBQUdDLG1EQUFBLENBQWE7QUFDL0JDLFNBQU8sRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDO0FBRFUsQ0FBYixDQUFwQjtBQUlPLE1BQU1DLGdCQUFnQixHQUFHLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQzVDLE1BQUlDLFlBQVksR0FBRyxlQUFuQjtBQUNBLE1BQUlDLFVBQVUsR0FBRyxvQkFBakI7QUFDQSxNQUFJQyxPQUFPLEdBQUcsRUFBZDs7QUFDQSxNQUFJSixHQUFHLENBQUNLLFFBQVIsRUFBa0I7QUFDaEI7QUFDQUgsZ0JBQVksR0FBR0YsR0FBRyxDQUFDSyxRQUFKLENBQWFDLElBQTVCO0FBQ0FILGNBQVUsR0FBR0gsR0FBRyxDQUFDSyxRQUFKLENBQWFFLE1BQTFCO0FBQ0FILFdBQU8sR0FBR0osR0FBRyxDQUFDSyxRQUFKLENBQWFELE9BQXZCO0FBQ0QsR0FMRCxNQUtPLElBQUlKLEdBQUcsQ0FBQ1EsT0FBUixFQUFpQjtBQUN0Qk4sZ0JBQVksR0FBRyxlQUFmO0FBQ0QsR0FGTSxNQUVBO0FBQ0xBLGdCQUFZLEdBQUdGLEdBQUcsQ0FBQ1MsT0FBbkI7QUFDRDs7QUFDRCxRQUFNSixRQUFRLEdBQUc7QUFDZkgsZ0JBRGU7QUFFZkMsY0FGZTtBQUdmQyxXQUhlO0FBSWZIO0FBSmUsR0FBakI7QUFNQVMsU0FBTyxDQUFDQyxHQUFSLENBQVksY0FBWixFQUE0Qk4sUUFBNUI7QUFDQSxTQUFPQSxRQUFQO0FBQ0QsQ0F0Qk07O0FBdUJQLE1BQU1PLGNBQWMsR0FBSUosT0FBRCxJQUFhQSxPQUFwQzs7QUFFQSxNQUFNSyxjQUFjLEdBQUlSLFFBQUQsSUFBY0EsUUFBckM7O0FBRUEsTUFBTVMsWUFBWSxHQUFJQyxLQUFELElBQVc7QUFBQTs7QUFDOUIsUUFBTUMsUUFBUSxHQUFHO0FBQ2ZDLGNBQVUsRUFDUEYsS0FBSyxDQUFDVixRQUFOLElBQWtCVSxLQUFLLENBQUNWLFFBQU4sQ0FBZUMsSUFBakMsSUFBeUNTLEtBQUssQ0FBQ1YsUUFBTixDQUFlQyxJQUFmLENBQW9CRyxPQUE5RCxJQUNDTSxLQUFLLENBQUNWLFFBQU4sSUFBa0JVLEtBQUssQ0FBQ1YsUUFBTixDQUFlWSxVQURsQyxJQUVBRixLQUFLLENBQUNOLE9BRk4sSUFHQSxFQUxhO0FBTWZGLFVBQU0sRUFBR1EsS0FBSyxDQUFDVixRQUFOLElBQWtCVSxLQUFLLENBQUNWLFFBQU4sQ0FBZUUsTUFBbEMsSUFBNkM7QUFOdEMsR0FBakI7O0FBUUEsTUFBSVEsS0FBSixhQUFJQSxLQUFKLGtDQUFJQSxLQUFLLENBQUVWLFFBQVgsb0VBQUksZ0JBQWlCQyxJQUFyQixpREFBSSxxQkFBdUJTLEtBQTNCLEVBQWtDO0FBQ2hDLFFBQUlOLE9BQUo7O0FBQ0EsUUFBSU0sS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JTLEtBQXBCLEtBQThCLDJCQUFsQyxFQUErRDtBQUM3RE4sYUFBTyxHQUNMLGlIQURGO0FBRUQsS0FIRCxNQUdPO0FBQ0xBLGFBQU8sR0FBR00sS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JTLEtBQTlCO0FBQ0Q7O0FBQ0RHLDJEQUFBLENBQVlULE9BQVosRUFBcUI7QUFDbkJVLGNBQVEsRUFBRUQscUVBQXlCRTtBQURoQixLQUFyQjtBQUdELEdBWEQsTUFXTyxJQUNMTCxLQUFLLElBQ0xBLEtBQUssQ0FBQ1YsUUFETixJQUVBVSxLQUFLLENBQUNWLFFBQU4sQ0FBZWdCLE1BQWYsQ0FBc0JwQixHQUF0QixDQUEwQnFCLE9BQTFCLENBQWtDLFdBQWxDLElBQWlELENBQUMsQ0FIN0MsRUFJTDtBQUNBLFdBQU8sS0FBUDtBQUNELEdBTk0sQ0FPUDtBQVBPLE9BUUYsSUFDSFAsS0FBSyxJQUNMQSxLQUFLLENBQUNWLFFBRE4sSUFFQVUsS0FBSyxDQUFDVixRQUFOLENBQWVDLElBRmYsSUFHQVMsS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JpQixNQUhwQixJQUlBUixLQUFLLENBQUNWLFFBQU4sQ0FBZUMsSUFBZixDQUFvQmlCLE1BQXBCLENBQTJCQyxJQUozQixJQUtBVCxLQUFLLENBQUNWLFFBQU4sQ0FBZUMsSUFBZixDQUFvQkMsTUFBcEIsSUFBOEIsUUFMOUIsS0FNQ1EsS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JpQixNQUFwQixDQUEyQkMsSUFBM0IsSUFBbUMsTUFBbkMsSUFDQ1QsS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JpQixNQUFwQixDQUEyQkMsSUFBM0IsSUFBbUMsTUFEcEMsSUFFQ1QsS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JpQixNQUFwQixDQUEyQkMsSUFBM0IsSUFBbUMsTUFGcEMsSUFHQ1QsS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JpQixNQUFwQixDQUEyQkMsSUFBM0IsSUFBbUMsTUFUckMsQ0FERyxFQVdIO0FBQ0FOLDZEQUFBLENBQ0VILEtBQUssQ0FBQ1YsUUFBTixDQUFlQyxJQUFmLENBQW9CaUIsTUFBcEIsQ0FBMkJkLE9BQTNCLElBQXNDZ0Isa0VBRHhDLEVBRUU7QUFDRU4sZ0JBQVEsRUFBRUQscUVBQXlCRTtBQURyQyxPQUZGO0FBTUEsWUFBTU0sZUFBZSxHQUNuQkMsTUFBTSxJQUNOQSxNQUFNLENBQUNDLGNBRFAsSUFFQUQsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixDQUE4QixrQkFBa0IsTUFBaEQsQ0FIRjs7QUFJQSxVQUFJSCxlQUFKLEVBQXFCLENBQ3BCLENBREQsTUFDTztBQUNMUiwrREFBQSxDQUNFSCxLQUFLLENBQUNWLFFBQU4sQ0FBZUMsSUFBZixDQUFvQmlCLE1BQXBCLENBQTJCZCxPQUEzQixJQUFzQ2dCLGtFQUR4QyxFQUVFO0FBQ0VOLGtCQUFRLEVBQUVELHFFQUF5QkU7QUFEckMsU0FGRjtBQU1BVSwrREFBQSxDQUNFLGdCQURGLEVBRUcsR0FBRUMsY0FBYyxDQUFDQyxnQkFBZixFQUFrQyxnQkFGdkM7QUFJRDtBQUNGLEtBbkNJLE1BbUNFLElBQ0xqQixLQUFLLElBQ0xBLEtBQUssQ0FBQ1YsUUFETixJQUVBVSxLQUFLLENBQUNWLFFBQU4sQ0FBZUMsSUFGZixJQUdBUyxLQUFLLENBQUNWLFFBQU4sQ0FBZUMsSUFBZixDQUFvQkMsTUFIcEIsSUFJQVEsS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JDLE1BQXBCLENBQTJCMEIsY0FKM0IsS0FLQ2xCLEtBQUssQ0FBQ1YsUUFBTixDQUFlQyxJQUFmLENBQW9CQyxNQUFwQixDQUEyQjBCLGNBQTNCLElBQTZDLE1BQTdDLElBQ0NsQixLQUFLLENBQUNWLFFBQU4sQ0FBZUMsSUFBZixDQUFvQkMsTUFBcEIsQ0FBMkIwQixjQUEzQixJQUE2QyxNQUQ5QyxJQUVDbEIsS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JDLE1BQXBCLENBQTJCMEIsY0FBM0IsSUFBNkMsTUFGOUMsSUFHQ2xCLEtBQUssQ0FBQ1YsUUFBTixDQUFlQyxJQUFmLENBQW9CQyxNQUFwQixDQUEyQjBCLGNBQTNCLElBQTZDLE1BSDlDLElBSUNsQixLQUFLLENBQUNWLFFBQU4sQ0FBZUMsSUFBZixDQUFvQkMsTUFBcEIsQ0FBMkIwQixjQUEzQixJQUE2QyxNQVQvQyxDQURLLEVBV0w7QUFDQWYsNkRBQUEsQ0FDRUgsS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JDLE1BQXBCLENBQTJCRSxPQUEzQixJQUFzQ2dCLGtFQUR4QyxFQUVFO0FBQ0VOLGdCQUFRLEVBQUVELHFFQUF5QkU7QUFEckMsT0FGRjtBQU1ELEtBbEJNLE1Ba0JBLElBQ0xMLEtBQUssSUFDTEEsS0FBSyxDQUFDVixRQUROLElBRUFVLEtBQUssQ0FBQ1YsUUFBTixDQUFlQyxJQUZmLElBR0FTLEtBQUssQ0FBQ1YsUUFBTixDQUFlQyxJQUFmLENBQW9CQyxNQUhwQixJQUlBUSxLQUFLLENBQUNWLFFBQU4sQ0FBZUMsSUFBZixDQUFvQkMsTUFBcEIsQ0FBMkIwQixjQUEzQixJQUE2QyxLQUo3QyxJQUtBbEIsS0FBSyxDQUFDVixRQUFOLENBQWVDLElBQWYsQ0FBb0JDLE1BQXBCLENBQTJCMkIsTUFBM0IsSUFBcUMsNEJBTmhDLEVBT0w7QUFDQWhCLDZEQUFBLENBQ0VILEtBQUssQ0FBQ1YsUUFBTixDQUFlQyxJQUFmLENBQW9CQyxNQUFwQixDQUEyQkUsT0FBM0IsSUFBc0NnQixrRUFEeEMsRUFFRTtBQUNFTixnQkFBUSxFQUFFRCxxRUFBeUJFO0FBRHJDLE9BRkY7QUFNRCxLQWRNLE1BY0E7QUFDTCxVQUFJSixRQUFRLENBQUNDLFVBQVQsS0FBd0IsNkJBQTVCLEVBQTJEO0FBQ3pEQywrREFBQSxDQUFZRixRQUFRLENBQUNDLFVBQVQsSUFBdUJRLGtFQUFuQyxFQUFnRTtBQUM5RE4sa0JBQVEsRUFBRUQscUVBQXlCRTtBQUQyQixTQUFoRTtBQUdEO0FBQ0YsS0FyRzZCLENBc0c5QjtBQUNBOzs7QUFDQSxRQUFNZCxJQUFJLEdBQUdTLEtBQUssSUFBSUEsS0FBSyxDQUFDVixRQUFmLElBQTJCVSxLQUFLLENBQUNWLFFBQU4sQ0FBZUMsSUFBdkQ7QUFDQSxTQUFPNkIsT0FBTyxDQUFDQyxNQUFSLENBQWU7QUFDcEIzQixXQUFPLEVBQUVPLFFBQVEsQ0FBQ0MsVUFERTtBQUVwQm9CLFdBQU8sRUFBRSxJQUZXO0FBR3BCckIsWUFIb0I7QUFJcEJWO0FBSm9CLEdBQWYsQ0FBUDtBQU1ELENBL0dELEMsQ0FpSEE7OztBQUNBYixhQUFhLElBQUlBLGFBQWEsQ0FBQzZDLFlBQWQsQ0FBMkI5QixPQUEzQixDQUFtQytCLEdBQW5DLENBQXVDM0IsY0FBdkMsQ0FBakI7QUFFQW5CLGFBQWEsSUFDWEEsYUFBYSxDQUFDNkMsWUFBZCxDQUEyQmpDLFFBQTNCLENBQW9Da0MsR0FBcEMsQ0FBd0MxQixjQUF4QyxFQUF3REMsWUFBeEQsQ0FERjtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxNQUFNMEIsUUFBUSxHQUFHLENBQUNDLE9BQU8sR0FBRyxJQUFYLEtBQW9CO0FBQ3RDLFNBQU9BLE9BQVA7QUFDTCxDQUZNOztBQUlQLE1BQU1WLGNBQU4sQ0FBcUI7QUF3Qm5CLGVBQWFXLG9CQUFiLEdBQW9DO0FBQ2xDLFdBQU87QUFDTHRDLGFBQU8sRUFBRTtBQUNQLHdCQUFnQjtBQURUO0FBREosS0FBUDtBQUtEOztBQUNELGVBQWF1Qyx1QkFBYixDQUFxQ0MsS0FBckMsRUFBNEM7QUFDMUMsVUFBTXZCLE1BQU0sR0FBRTtBQUNWakIsYUFBTyxFQUFFO0FBQ1Asd0JBQWdCO0FBRFQ7QUFEQyxLQUFkOztBQUtDLFFBQUl3QyxLQUFKLEVBQVc7QUFDUnZCLFlBQU0sQ0FBQ2pCLE9BQVAsQ0FBZXlDLGFBQWYsR0FBZ0MsVUFBU0QsS0FBTSxFQUEvQztBQUNBdkIsWUFBTSxDQUFDakIsT0FBUCxDQUFlMEMsVUFBZixHQUE0QkYsS0FBNUI7QUFDRDs7QUFDSCxXQUFPdkIsTUFBUDtBQUNEOztBQTFDa0I7O2dCQUFmVSxjLGNBQ2MsRTs7Z0JBRGRBLGMscUJBR0YsQ0FBQ2dCLFNBQVMsR0FBRyxLQUFiLEtBQ0EsT0FBT04sT0FBTyxHQUFHLElBQWpCLEVBQXVCTyxZQUFZLEdBQUcsRUFBdEMsS0FBNkM7QUFDM0MsTUFBSUosS0FBSjs7QUFDQSxNQUFJRyxTQUFKLEVBQWU7QUFDYkgsU0FBSyxHQUFHSixRQUFRLENBQUNDLE9BQUQsQ0FBaEI7QUFDRDs7QUFDRCxRQUFNUSxLQUFLLEdBQUc7QUFDWkMsWUFBUSxFQUFFO0FBREUsR0FBZDtBQUdBLFFBQU03QixNQUFNLEdBQUc7QUFDYjhCLFVBQU0sRUFBRSxLQURLO0FBRWIvQyxXQUFPO0FBQ0w2QyxXQUFLLEVBQUVHLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixLQUFmO0FBREYsT0FFRkQsWUFGRTtBQUZNLEdBQWY7O0FBT0EsTUFBSUosS0FBSixFQUFXO0FBQ1R2QixVQUFNLENBQUNqQixPQUFQLENBQWV5QyxhQUFmLEdBQWdDLFVBQVNELEtBQU0sRUFBL0M7QUFDRDs7QUFDRCxTQUFPdkIsTUFBUDtBQUNELEM7O2dCQXZCQ1UsYyxxQkE0Q0YsQ0FBQ2dCLFNBQVMsR0FBRyxLQUFiLEtBQ0EsT0FBTzlDLEdBQVAsRUFBWXFELE1BQVosRUFBb0JDLFFBQVEsR0FBSUMsQ0FBRCxJQUFPQSxDQUF0QyxLQUE0QztBQUMxQyxRQUFNQyxNQUFNLEdBQUdWLFNBQVMsR0FBRyxNQUFNaEIsY0FBYyxDQUFDWSx1QkFBZixFQUFULEdBQ3RCLE1BQU1aLGNBQWMsQ0FBQ1csb0JBQWYsQ0FBb0MsSUFBcEMsQ0FEUjtBQUVBLFNBQU9qRCxhQUFhLENBQ2pCaUUsSUFESSxDQUNDekQsR0FERCxFQUNNcUQsTUFETixFQUNjRyxNQURkLEVBRUpFLElBRkksQ0FFRXRELFFBQUQsSUFBYztBQUNsQmtELFlBQVEsQ0FBQ2xELFFBQUQsRUFBVyxJQUFYLENBQVI7QUFDQSxXQUFPQSxRQUFRLElBQUlBLFFBQVEsQ0FBQ0MsSUFBNUI7QUFDRCxHQUxJLEVBTUpzRCxLQU5JLENBTUc3QyxLQUFELElBQVc7QUFDaEJ3QyxZQUFRLENBQUMsSUFBRCxFQUFPeEMsS0FBUCxDQUFSO0FBQ0EsV0FBT0EsS0FBUDtBQUNELEdBVEksQ0FBUDtBQVVELEM7O2dCQTFEQ2dCLGMsb0JBNERGLENBQUNhLEtBQUssR0FBRyxFQUFULEtBQ0EsT0FBTzNDLEdBQVAsRUFBWXdDLE9BQU8sR0FBRyxJQUF0QixFQUE0Qk8sWUFBWSxHQUFHLEVBQTNDLEtBQWtEO0FBQ2xEO0FBQ0UsUUFBTTVDLE9BQU8sR0FBRyxNQUFNMkIsY0FBYyxDQUFDWSx1QkFBZixDQUF1Q0MsS0FBdkMsQ0FBdEI7QUFDQSxRQUFNdkMsUUFBUSxHQUFHLE1BQU1aLGFBQWEsQ0FBQ29FLEdBQWQsQ0FBa0I1RCxHQUFsQixFQUF1QkcsT0FBdkIsQ0FBdkI7QUFDQSxTQUFPQyxRQUFRLENBQUNDLElBQWhCO0FBQ0QsQzs7QUFJRSxNQUFNd0Qsa0JBQWtCLEdBQUcsQ0FBQ0MsUUFBRCxFQUFXQyxPQUFYLEtBQXVCO0FBQ3ZELE1BQUkvRCxHQUFKOztBQUNBLFFBQU1nRSxTQUFTLEdBQUcsTUFBTWxDLGNBQWMsQ0FBQ21DLHVCQUFmLEVBQXhCOztBQUNBLFFBQU1DLE1BQU0sR0FBSUMsV0FBRCxJQUNabkUsR0FBRyxHQUFJLEdBQUUwQixNQUFNLENBQUMwQyxRQUFTLEdBQUVMLE9BQVEsR0FDbENJLFdBQVcsR0FBRyxNQUFNQSxXQUFULEdBQXVCLEVBQ25DLEVBSEg7O0FBSUEsUUFBTUUsTUFBTSxHQUNUckUsR0FBRCxJQUNBLENBQUNxRCxNQUFNLEdBQUcsRUFBVixLQUFpQjtBQUNmLFVBQU1pQixRQUFRLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZbkIsTUFBWixFQUNkb0IsTUFEYyxDQUNOQyxDQUFELElBQU8sQ0FBQyxDQUFDckIsTUFBTSxDQUFDcUIsQ0FBRCxDQURSLEVBRWRDLEdBRmMsQ0FFVEQsQ0FBRCxJQUFRLEdBQUVBLENBQUUsSUFBR3JCLE1BQU0sQ0FBQ3FCLENBQUQsQ0FBSSxFQUZmLEVBR2RFLElBSGMsQ0FHVCxHQUhTLENBQWpCO0FBSUEsVUFBTUMsR0FBRyxHQUFHN0UsR0FBRyxDQUFDcUIsT0FBSixDQUFZLEdBQVosSUFBbUIsQ0FBQyxDQUFwQixHQUF3QixHQUF4QixHQUE4QixHQUExQztBQUNBLFdBQVEsR0FBRXJCLEdBQUksR0FBRTZFLEdBQUksR0FBRVAsUUFBUyxFQUEvQjtBQUNELEdBVEg7O0FBV0EsUUFBTVYsR0FBRyxHQUFHLE1BQU9QLE1BQVAsSUFBa0I7QUFDNUIsVUFBTWxELE9BQU8sR0FBRzJCLGNBQWMsQ0FBQ2dELGFBQWYsS0FBaUMsTUFBTWQsU0FBUyxFQUFoRCxHQUFxRCxFQUFyRTtBQUNBLFVBQU01RCxRQUFRLEdBQUcsTUFBTVgsZ0RBQUEsQ0FDaEI0RSxNQUFNLENBQUNyRSxHQUFELENBQU4sQ0FBWXFELE1BQVosQ0FEZ0IsRUFDS2xELE9BREwsRUFFcEJ3RCxLQUZvQixDQUVkOUMsWUFGYyxDQUF2QjtBQUdBLFdBQU9ULFFBQVEsQ0FBQ0MsSUFBaEI7QUFDRCxHQU5EOztBQVFBLFFBQU0wRSxHQUFHLEdBQUcsTUFBTzFCLE1BQVAsSUFBa0I7QUFDNUIsVUFBTWxELE9BQU8sR0FBRyxNQUFNNkQsU0FBUyxFQUEvQjtBQUNBLFVBQU01RCxRQUFRLEdBQUcsTUFBTVgsbURBQUEsQ0FDYjRFLE1BQU0sQ0FBQ3JFLEdBQUQsQ0FBTixDQUFZcUQsTUFBWixDQURhLEVBQ1FsRCxPQURSLEVBRXBCd0QsS0FGb0IsQ0FFZDlDLFlBRmMsQ0FBdkI7QUFHQSxXQUFPVCxRQUFRLENBQUNDLElBQWhCO0FBQ0QsR0FORDs7QUFRQSxRQUFNb0QsSUFBSSxHQUFHLE9BQU91QixRQUFQLEVBQWlCQyxRQUFRLEdBQUcsTUFBNUIsS0FBdUM7QUFDbEQsUUFBSTlFLE9BQU8sR0FBRyxNQUFNNkQsU0FBUyxFQUE3QjtBQUNBLFVBQU01RCxRQUFRLEdBQUcsTUFBTVgsaURBQUEsQ0FDZk8sR0FEZSxFQUNWZ0YsUUFEVSxFQUNBN0UsT0FEQSxFQUVwQndELEtBRm9CLENBRWQ5QyxZQUZjLENBQXZCO0FBR0EsV0FBT29FLFFBQVEsS0FBSyxNQUFiLEdBQXNCN0UsUUFBUSxDQUFDQyxJQUEvQixHQUFzQ0QsUUFBUSxDQUFDRSxNQUFULEtBQW9CLEdBQWpFO0FBQ0QsR0FORDs7QUFRQSxRQUFNNEUsR0FBRyxHQUFHLE1BQU9GLFFBQVAsSUFBb0I7QUFDOUIsVUFBTTdFLE9BQU8sR0FBRyxNQUFNNkQsU0FBUyxFQUEvQjtBQUNBLFVBQU01RCxRQUFRLEdBQUcsTUFBTVgsZ0RBQUEsQ0FDaEJPLEdBRGdCLEVBQ1hnRixRQURXLEVBQ0Q3RSxPQURDLEVBRXBCd0QsS0FGb0IsQ0FFZDlDLFlBRmMsQ0FBdkI7QUFHQSxXQUFPVCxRQUFRLENBQUNDLElBQWhCO0FBQ0QsR0FORDs7QUFPQSxRQUFNOEUsU0FBUyxHQUFHLE9BQU9ILFFBQVAsRUFBaUJDLFFBQVEsR0FBRyxNQUE1QixLQUF1QztBQUN2RCxRQUFJOUUsT0FBTyxHQUFHLE1BQU02RCxTQUFTLEVBQTdCO0FBQ0EsVUFBTTVELFFBQVEsR0FBRyxNQUFNWCxpREFBQSxDQUNmeUUsTUFBTSxDQUFDSixRQUFELENBRFMsRUFDRyxFQURILEVBQ08zRCxPQURQLEVBRXBCd0QsS0FGb0IsQ0FFZDlDLFlBRmMsQ0FBdkI7QUFHQSxXQUFPb0UsUUFBUSxLQUFLLE1BQWIsR0FBc0I3RSxRQUFRLENBQUNDLElBQS9CLEdBQXNDRCxRQUFRLENBQUNFLE1BQVQsS0FBb0IsR0FBakU7QUFDRCxHQU5EOztBQU9BLFFBQU04RSxRQUFRLEdBQUcsWUFBWTtBQUMzQixVQUFNakYsT0FBTyxHQUFHLE1BQU02RCxTQUFTLEVBQS9CO0FBQ0EsVUFBTTVELFFBQVEsR0FBRyxNQUFNWCxtREFBQSxDQUNieUUsTUFBTSxDQUFDSixRQUFELENBRE8sRUFDSzNELE9BREwsRUFFcEJ3RCxLQUZvQixDQUVkOUMsWUFGYyxDQUF2QjtBQUdBLFdBQU9ULFFBQVEsQ0FBQ0MsSUFBaEI7QUFDRCxHQU5EOztBQU9BNkQsUUFBTSxDQUFDSixRQUFELENBQU47QUFFQSxTQUFPO0FBQ0xJLFVBREs7QUFFTE4sT0FGSztBQUdMSCxRQUhLO0FBSUxzQixPQUpLO0FBS0xHLE9BTEs7QUFNTEMsYUFOSztBQU9MQztBQVBLLEdBQVA7QUFTRCxDQTFFTTtBQTRFUCwrREFBZXRELGNBQWYiLCJmaWxlIjoiLi9zcmMvTmV0d29ya01hbmFnZXIvTmV0d29ya01hbmFnZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgY29va2llIGZyb20gXCJqcy1jb29raWVcIjtcbmltcG9ydCBqc0Nvb2tpZSBmcm9tIFwianMtY29va2llXCI7XG5pbXBvcnQgeyB0b2FzdCB9IGZyb20gXCJyZWFjdC10b2FzdGlmeVwiO1xuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gXCIuLi9jb25zdGFudHMvY29uc3RhbnRcIjtcbmltcG9ydCAqIGFzIEFQSUNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudHMvQVBJQ29uc3RhbnRcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIm5leHQvcm91dGVyXCI7XG5pbXBvcnQgeyBNQVhfRVhQSVJZIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9jb25zdGFudFwiO1xuXG5cblxubGV0IGF4aW9zSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoe1xuICBiYXNlVVJMOiBwcm9jZXNzLmVudi5DT1JTLFxufSk7XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRBeGlvc0Vycm9yID0gKGVyciwgdXJsKSA9PiB7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcInVua3dvd24tZXJyb3JcIjtcbiAgbGV0IHN0YXR1c0NvZGUgPSBcInVua3dvd24tc3RhdXMtY29kZVwiO1xuICBsZXQgaGVhZGVycyA9IFtdO1xuICBpZiAoZXJyLnJlc3BvbnNlKSB7XG4gICAgLy8gVGhlIGNsaWVudCB3YXMgZ2l2ZW4gYW4gZXJyb3IgcmVzcG9uc2UgKDV4eCwgNHh4KVxuICAgIGVycm9yTWVzc2FnZSA9IGVyci5yZXNwb25zZS5kYXRhO1xuICAgIHN0YXR1c0NvZGUgPSBlcnIucmVzcG9uc2Uuc3RhdHVzO1xuICAgIGhlYWRlcnMgPSBlcnIucmVzcG9uc2UuaGVhZGVycztcbiAgfSBlbHNlIGlmIChlcnIucmVxdWVzdCkge1xuICAgIGVycm9yTWVzc2FnZSA9IFwiTmV0d29yayBpc3N1ZVwiO1xuICB9IGVsc2Uge1xuICAgIGVycm9yTWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuICB9XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgIGVycm9yTWVzc2FnZSxcbiAgICBzdGF0dXNDb2RlLFxuICAgIGhlYWRlcnMsXG4gICAgdXJsLFxuICB9O1xuICBjb25zb2xlLmxvZyhcIkF4aW9zIEVycm9yOlwiLCByZXNwb25zZSk7XG4gIHJldHVybiByZXNwb25zZTtcbn07XG5jb25zdCByZXF1ZXN0SGFuZGxlciA9IChyZXF1ZXN0KSA9PiByZXF1ZXN0O1xuXG5jb25zdCBzdWNjZXNzSGFuZGxlciA9IChyZXNwb25zZSkgPT4gcmVzcG9uc2U7XG5cbmNvbnN0IGVycm9ySGFuZGxlciA9IChlcnJvcikgPT4ge1xuICBjb25zdCBlcnJvck9iaiA9IHtcbiAgICBzdGF0dXNUZXh0OlxuICAgICAgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLmRhdGEgJiYgZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlKSB8fFxuICAgICAgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1c1RleHQpIHx8XG4gICAgICBlcnJvci5tZXNzYWdlIHx8XG4gICAgICBcIlwiLFxuICAgIHN0YXR1czogKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cykgfHwgXCJuYVwiLFxuICB9O1xuICBpZiAoZXJyb3I/LnJlc3BvbnNlPy5kYXRhPy5lcnJvcikge1xuICAgIGxldCBtZXNzYWdlO1xuICAgIGlmIChlcnJvci5yZXNwb25zZS5kYXRhLmVycm9yID09PSBcIkFjY291bnQgY3VycmVudGx5IGxvY2tlZC5cIikge1xuICAgICAgbWVzc2FnZSA9XG4gICAgICAgIFwiWW91ciBhY2NvdW50IGhhcyBiZWVuIGxvY2tlZCBkdWUgdG8gbXVsdGlwbGUgZmFpbGVkIGF0dGVtcHRzLkl0IHdpbGwgYmUgdW5sb2NrZWQgYXV0b21hdGljYWxseSBhZnRlciA1IG1pbnV0ZXMuXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lc3NhZ2UgPSBlcnJvci5yZXNwb25zZS5kYXRhLmVycm9yO1xuICAgIH1cbiAgICB0b2FzdC5lcnJvcihtZXNzYWdlLCB7XG4gICAgICBwb3NpdGlvbjogdG9hc3QuUE9TSVRJT04uVE9QX0NFTlRFUixcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChcbiAgICBlcnJvciAmJlxuICAgIGVycm9yLnJlc3BvbnNlICYmXG4gICAgZXJyb3IucmVzcG9uc2UuY29uZmlnLnVybC5pbmRleE9mKFwicHJlLXNjb3JlXCIpID4gLTFcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGVycm9yIGZvciBtZXNzYWdlIFwiWW91IGNhcnQgaGFzIHNvbWUgaXNzdWUsIHBsZWFzZSBjb3JyZWN0IGl0IGJlZm9yZSBwcm9jZWVkaW5nXCJcbiAgZWxzZSBpZiAoXG4gICAgZXJyb3IgJiZcbiAgICBlcnJvci5yZXNwb25zZSAmJlxuICAgIGVycm9yLnJlc3BvbnNlLmRhdGEgJiZcbiAgICBlcnJvci5yZXNwb25zZS5kYXRhLnJlc3VsdCAmJlxuICAgIGVycm9yLnJlc3BvbnNlLmRhdGEucmVzdWx0LmNvZGUgJiZcbiAgICBlcnJvci5yZXNwb25zZS5kYXRhLnN0YXR1cyA9PSBcIkZBSUxFRFwiICYmXG4gICAgKGVycm9yLnJlc3BvbnNlLmRhdGEucmVzdWx0LmNvZGUgPT0gXCIxMDA4XCIgfHxcbiAgICAgIGVycm9yLnJlc3BvbnNlLmRhdGEucmVzdWx0LmNvZGUgPT0gXCIxMDAxXCIgfHxcbiAgICAgIGVycm9yLnJlc3BvbnNlLmRhdGEucmVzdWx0LmNvZGUgPT0gXCIxMDAyXCIgfHxcbiAgICAgIGVycm9yLnJlc3BvbnNlLmRhdGEucmVzdWx0LmNvZGUgPT0gXCIxMDA5XCIpXG4gICkge1xuICAgIHRvYXN0LmVycm9yKFxuICAgICAgZXJyb3IucmVzcG9uc2UuZGF0YS5yZXN1bHQubWVzc2FnZSB8fCBDb25zdGFudHMuR0VORVJJQ19FUlJPUl9NU0csXG4gICAgICB7XG4gICAgICAgIHBvc2l0aW9uOiB0b2FzdC5QT1NJVElPTi5UT1BfQ0VOVEVSLFxuICAgICAgfVxuICAgICk7XG4gICAgY29uc3QgcHJlb3JkZXJQcm9kdWN0ID1cbiAgICAgIHdpbmRvdyAmJlxuICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlICYmXG4gICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInByZW9yZGVyRmxvd1wiID09IFwidHJ1ZVwiKTtcbiAgICBpZiAocHJlb3JkZXJQcm9kdWN0KSB7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvYXN0LmVycm9yKFxuICAgICAgICBlcnJvci5yZXNwb25zZS5kYXRhLnJlc3VsdC5tZXNzYWdlIHx8IENvbnN0YW50cy5HRU5FUklDX0VSUk9SX01TRyxcbiAgICAgICAge1xuICAgICAgICAgIHBvc2l0aW9uOiB0b2FzdC5QT1NJVElPTi5UT1BfQ0VOVEVSLFxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgUm91dGVyLnB1c2goXG4gICAgICAgIFwiL2NoZWNrb3V0L2NhcnRcIixcbiAgICAgICAgYCR7TmV0d29ya01hbmFnZXIuZ2V0TGFuZ1VybFByZWZpeCgpfS9jaGVja291dC9jYXJ0YFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgZXJyb3IgJiZcbiAgICBlcnJvci5yZXNwb25zZSAmJlxuICAgIGVycm9yLnJlc3BvbnNlLmRhdGEgJiZcbiAgICBlcnJvci5yZXNwb25zZS5kYXRhLnN0YXR1cyAmJlxuICAgIGVycm9yLnJlc3BvbnNlLmRhdGEuc3RhdHVzLmh0dHBTdGF0dXNDb2RlICYmXG4gICAgKGVycm9yLnJlc3BvbnNlLmRhdGEuc3RhdHVzLmh0dHBTdGF0dXNDb2RlID09IFwiMjAwMlwiIHx8XG4gICAgICBlcnJvci5yZXNwb25zZS5kYXRhLnN0YXR1cy5odHRwU3RhdHVzQ29kZSA9PSBcIjIwMDVcIiB8fFxuICAgICAgZXJyb3IucmVzcG9uc2UuZGF0YS5zdGF0dXMuaHR0cFN0YXR1c0NvZGUgPT0gXCIyMDA3XCIgfHxcbiAgICAgIGVycm9yLnJlc3BvbnNlLmRhdGEuc3RhdHVzLmh0dHBTdGF0dXNDb2RlID09IFwiMjAwM1wiIHx8XG4gICAgICBlcnJvci5yZXNwb25zZS5kYXRhLnN0YXR1cy5odHRwU3RhdHVzQ29kZSA9PSBcIjIwMDBcIilcbiAgKSB7XG4gICAgdG9hc3QuZXJyb3IoXG4gICAgICBlcnJvci5yZXNwb25zZS5kYXRhLnN0YXR1cy5tZXNzYWdlIHx8IENvbnN0YW50cy5HRU5FUklDX0VSUk9SX01TRyxcbiAgICAgIHtcbiAgICAgICAgcG9zaXRpb246IHRvYXN0LlBPU0lUSU9OLlRPUF9DRU5URVIsXG4gICAgICB9XG4gICAgKTtcbiAgfSBlbHNlIGlmIChcbiAgICBlcnJvciAmJlxuICAgIGVycm9yLnJlc3BvbnNlICYmXG4gICAgZXJyb3IucmVzcG9uc2UuZGF0YSAmJlxuICAgIGVycm9yLnJlc3BvbnNlLmRhdGEuc3RhdHVzICYmXG4gICAgZXJyb3IucmVzcG9uc2UuZGF0YS5zdGF0dXMuaHR0cFN0YXR1c0NvZGUgPT0gXCI0MDBcIiAmJlxuICAgIGVycm9yLnJlc3BvbnNlLmRhdGEuc3RhdHVzLmVycm9ycyA9PSBcIlByb2R1Y3RJc0Rpc2FibGVkRXhjZXB0aW9uXCJcbiAgKSB7XG4gICAgdG9hc3QuZXJyb3IoXG4gICAgICBlcnJvci5yZXNwb25zZS5kYXRhLnN0YXR1cy5tZXNzYWdlIHx8IENvbnN0YW50cy5HRU5FUklDX0VSUk9SX01TRyxcbiAgICAgIHtcbiAgICAgICAgcG9zaXRpb246IHRvYXN0LlBPU0lUSU9OLlRPUF9DRU5URVIsXG4gICAgICB9XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZXJyb3JPYmouc3RhdHVzVGV4dCAhPT0gXCJDYXJ0IElkZW50aWZpZXIgR2VuZXJhdGVkICFcIikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3JPYmouc3RhdHVzVGV4dCB8fCBDb25zdGFudHMuR0VORVJJQ19FUlJPUl9NU0csIHtcbiAgICAgICAgcG9zaXRpb246IHRvYXN0LlBPU0lUSU9OLlRPUF9DRU5URVIsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLy9jb25zb2xlLmxvZygnQVBJIEVycm9yIC0+ICcsIGVycm9yT2JqLCAnXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tJywgZXJyb3IuY29uZmlnLCAnLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuJylcbiAgLy9jb25zb2xlLmxvZygnZXJyb3InLCBlcnJvci5jb25maWcpXG4gIGNvbnN0IGRhdGEgPSBlcnJvciAmJiBlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5kYXRhO1xuICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuICAgIG1lc3NhZ2U6IGVycm9yT2JqLnN0YXR1c1RleHQsXG4gICAgaXNFcnJvcjogdHJ1ZSxcbiAgICBlcnJvck9iaixcbiAgICBkYXRhLFxuICB9KTtcbn07XG5cbi8vIEF4aW9zIGludGVyY2VwdG9yc1xuYXhpb3NJbnN0YW5jZSAmJiBheGlvc0luc3RhbmNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShyZXF1ZXN0SGFuZGxlcik7XG5cbmF4aW9zSW5zdGFuY2UgJiZcbiAgYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKHN1Y2Nlc3NIYW5kbGVyLCBlcnJvckhhbmRsZXIpO1xuXG4vKipcbiAqIElzb21vcnBoaWMgZnVuY3Rpb24gbWFrZSBzdXJlIHRoYXQgdG9rZW4gaXMgYXZhaWxhYmxlIGFuZCBub3QgZXhwaXJlZFxuICogTm90ZTogZmV0Y2hpbmcgXCIvVjEvc2Vzc2lvbi9hZG1pbi90b2tlblwiIGlzIGV4Y2x1c2l2ZSB0byBiYWNrZW5kIHNpbmNlIGl0IHVzZXMgc2VjcmV0IGFwaVVzZXIgYW5kIHBhc3N3b3JkXG4gKiBAcGFyYW0gY29udGV4dFxuICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nfHVuZGVmaW5lZHwqfFByb21pc2U8c3RyaW5nfHVuZGVmaW5lZHwqPj59XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUb2tlbiA9IChjb250ZXh0ID0gbnVsbCkgPT4ge1xuICAgICAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5jbGFzcyBOZXR3b3JrTWFuYWdlciB7XG4gIHN0YXRpYyBzZWxlY3RlZCA9IHt9O1xuICBzdGF0aWMgbWFrZUhlYWRlclBhcmFtID1cbiAgICAod2l0aFRva2VuID0gZmFsc2UpID0+XG4gICAgYXN5bmMgKGNvbnRleHQgPSBudWxsLCBleHRyYUhlYWRlcnMgPSB7fSkgPT4ge1xuICAgICAgbGV0IHRva2VuO1xuICAgICAgaWYgKHdpdGhUb2tlbikge1xuICAgICAgICB0b2tlbiA9IGdldFRva2VuKGNvbnRleHQpO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyYW0gPSB7XG4gICAgICAgIHBsYXRmb3JtOiBcIndlYlwiLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgcGFyYW06IEpTT04uc3RyaW5naWZ5KHBhcmFtKSxcbiAgICAgICAgICAuLi5leHRyYUhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSBgQmVhcmVyICR7dG9rZW59YDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcbiAgc3RhdGljIGFzeW5jIG1ha2VUb2tlbkhlYWRlclBhcmFtKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICB9LFxuICAgIH07XG4gIH1cbiAgc3RhdGljIGFzeW5jIG1ha2VHZXRUb2tlbkhlYWRlclBhcmFtKHRva2VuKSB7XG4gICAgY29uc3QgY29uZmlnID17XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgIGlmICh0b2tlbikge1xuICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gYEJlYXJlciAke3Rva2VufWA7XG4gICAgICAgIGNvbmZpZy5oZWFkZXJzLk9UQ1NUSUNLRVQgPSB0b2tlbjtcbiAgICAgIH1cbiAgICByZXR1cm4gY29uZmlnOyAgIFxuICB9XG4gIHN0YXRpYyBwb3N0RGF0YVdpdGhVcmwgPVxuICAgICh3aXRoVG9rZW4gPSBmYWxzZSkgPT5cbiAgICBhc3luYyAodXJsLCBwYXJhbXMsIGNhbGxiYWNrID0gKGEpID0+IGEpID0+IHtcbiAgICAgIGNvbnN0IGhlYWRlciA9IHdpdGhUb2tlbiA/IGF3YWl0IE5ldHdvcmtNYW5hZ2VyLm1ha2VHZXRUb2tlbkhlYWRlclBhcmFtKClcbiAgICAgIDogYXdhaXQgTmV0d29ya01hbmFnZXIubWFrZVRva2VuSGVhZGVyUGFyYW0obnVsbCk7XG4gICAgICByZXR1cm4gYXhpb3NJbnN0YW5jZVxuICAgICAgICAucG9zdCh1cmwsIHBhcmFtcywgaGVhZGVyKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZSwgbnVsbCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlICYmIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCBlcnJvcik7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9KTtcbiAgICB9O1xuICBzdGF0aWMgZ2V0RGF0YVdpdGhVcmwgPVxuICAgICh0b2tlbiA9ICcnKSA9PlxuICAgIGFzeW5jICh1cmwsIGNvbnRleHQgPSBudWxsLCBleHRyYUhlYWRlcnMgPSB7fSkgPT4ge1xuICAgIC8vIHVybCA9IHVybCArIFwiJnVzZXJJRD1cIiArIGNvbnRleHQuZW1haWw7XG4gICAgICBjb25zdCBoZWFkZXJzID0gYXdhaXQgTmV0d29ya01hbmFnZXIubWFrZUdldFRva2VuSGVhZGVyUGFyYW0odG9rZW4pO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0luc3RhbmNlLmdldCh1cmwsIGhlYWRlcnMpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfTtcblxuICAgIFxufVxuZXhwb3J0IGNvbnN0IGNyZWF0ZVBsdXNBeGlvc1JlcSA9IChlbmRwb2ludCwgYmFzZVVybCkgPT4ge1xuICBsZXQgdXJsO1xuICBjb25zdCBnZXRIZWFkZXIgPSAoKSA9PiBOZXR3b3JrTWFuYWdlci5tYWtlSGVhZGVyUGFyYW1XaXNoTGlzdCgpO1xuICBjb25zdCBzZXRVcmwgPSAoZW5kcG9pbnRVcmwpID0+XG4gICAgKHVybCA9IGAke3dpbmRvdy5DT1JTX1VSTH0ke2Jhc2VVcmx9JHtcbiAgICAgIGVuZHBvaW50VXJsID8gXCIvXCIgKyBlbmRwb2ludFVybCA6IFwiXCJcbiAgICB9YCk7XG4gIGNvbnN0IHdpdGhRcyA9XG4gICAgKHVybCkgPT5cbiAgICAocGFyYW1zID0ge30pID0+IHtcbiAgICAgIGNvbnN0IHFzU3RyaW5nID0gT2JqZWN0LmtleXMocGFyYW1zKVxuICAgICAgICAuZmlsdGVyKChrKSA9PiAhIXBhcmFtc1trXSlcbiAgICAgICAgLm1hcCgoaykgPT4gYCR7a309JHtwYXJhbXNba119YClcbiAgICAgICAgLmpvaW4oXCImXCIpO1xuICAgICAgY29uc3Qgc2VwID0gdXJsLmluZGV4T2YoXCI/XCIpID4gLTEgPyBcIiZcIiA6IFwiP1wiO1xuICAgICAgcmV0dXJuIGAke3VybH0ke3NlcH0ke3FzU3RyaW5nfWA7XG4gICAgfTtcblxuICBjb25zdCBnZXQgPSBhc3luYyAocGFyYW1zKSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IE5ldHdvcmtNYW5hZ2VyLmdldEN1c3RvbWVySUQoKSA/IGF3YWl0IGdldEhlYWRlcigpIDoge307XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc1xuICAgICAgLmdldCh3aXRoUXModXJsKShwYXJhbXMpLCBoZWFkZXJzKVxuICAgICAgLmNhdGNoKGVycm9ySGFuZGxlcik7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH07XG5cbiAgY29uc3QgZGVsID0gYXN5bmMgKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBhd2FpdCBnZXRIZWFkZXIoKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zXG4gICAgICAuZGVsZXRlKHdpdGhRcyh1cmwpKHBhcmFtcyksIGhlYWRlcnMpXG4gICAgICAuY2F0Y2goZXJyb3JIYW5kbGVyKTtcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgfTtcblxuICBjb25zdCBwb3N0ID0gYXN5bmMgKGJvZHlEYXRhLCByZXR1cm5lZCA9IFwiZGF0YVwiKSA9PiB7XG4gICAgbGV0IGhlYWRlcnMgPSBhd2FpdCBnZXRIZWFkZXIoKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zXG4gICAgICAucG9zdCh1cmwsIGJvZHlEYXRhLCBoZWFkZXJzKVxuICAgICAgLmNhdGNoKGVycm9ySGFuZGxlcik7XG4gICAgcmV0dXJuIHJldHVybmVkID09PSBcImRhdGFcIiA/IHJlc3BvbnNlLmRhdGEgOiByZXNwb25zZS5zdGF0dXMgPT09IDIwMDtcbiAgfTtcblxuICBjb25zdCBwdXQgPSBhc3luYyAoYm9keURhdGEpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gYXdhaXQgZ2V0SGVhZGVyKCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc1xuICAgICAgLnB1dCh1cmwsIGJvZHlEYXRhLCBoZWFkZXJzKVxuICAgICAgLmNhdGNoKGVycm9ySGFuZGxlcik7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH07XG4gIGNvbnN0IHBvc3RDb3VwbiA9IGFzeW5jIChib2R5RGF0YSwgcmV0dXJuZWQgPSBcImRhdGFcIikgPT4ge1xuICAgIGxldCBoZWFkZXJzID0gYXdhaXQgZ2V0SGVhZGVyKCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc1xuICAgICAgLnBvc3Qoc2V0VXJsKGVuZHBvaW50KSwge30sIGhlYWRlcnMpXG4gICAgICAuY2F0Y2goZXJyb3JIYW5kbGVyKTtcbiAgICByZXR1cm4gcmV0dXJuZWQgPT09IFwiZGF0YVwiID8gcmVzcG9uc2UuZGF0YSA6IHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwO1xuICB9O1xuICBjb25zdCBkZWxDb3VwbiA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gYXdhaXQgZ2V0SGVhZGVyKCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc1xuICAgICAgLmRlbGV0ZShzZXRVcmwoZW5kcG9pbnQpLCBoZWFkZXJzKVxuICAgICAgLmNhdGNoKGVycm9ySGFuZGxlcik7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH07XG4gIHNldFVybChlbmRwb2ludCk7XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRVcmwsXG4gICAgZ2V0LFxuICAgIHBvc3QsXG4gICAgZGVsLFxuICAgIHB1dCxcbiAgICBwb3N0Q291cG4sXG4gICAgZGVsQ291cG4sXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOZXR3b3JrTWFuYWdlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/NetworkManager/NetworkManager.js\n");

/***/ }),

/***/ "./src/constants/APIConstant.js":
/*!**************************************!*\
  !*** ./src/constants/APIConstant.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"POST_LOGIN\": function() { return /* binding */ POST_LOGIN; },\n/* harmony export */   \"GETUSER_VALIDATION\": function() { return /* binding */ GETUSER_VALIDATION; },\n/* harmony export */   \"POSTUSER_RESET\": function() { return /* binding */ POSTUSER_RESET; },\n/* harmony export */   \"GET_PROJECTS\": function() { return /* binding */ GET_PROJECTS; },\n/* harmony export */   \"GET_SUBMITTALS\": function() { return /* binding */ GET_SUBMITTALS; },\n/* harmony export */   \"GET_ASSIGNMENTS_NEW\": function() { return /* binding */ GET_ASSIGNMENTS_NEW; },\n/* harmony export */   \"GET_OTDSTICKET\": function() { return /* binding */ GET_OTDSTICKET; }\n/* harmony export */ });\nif (false) {} // Generic API endpoints\n\n\nconst POST_LOGIN = '/otcs/llisapi.dll/api/v1/auth';\nconst GETUSER_VALIDATION = '/IMService/checkUser';\nconst POSTUSER_RESET = '/IMService/resetPassword';\nconst GET_PROJECTS = '/otcs/llisapi.dll/api/v1/nodes/116934938/output?format=webreport&draw=1';\nconst GET_SUBMITTALS = '/otcs/llisapi.dll/api/v1/nodes/116895788/output?format=webreport';\nconst GET_ASSIGNMENTS_NEW = '/otcs/llisapi.dll/api/v1/nodes/117635803/output?format=webreport';\nconst GET_OTDSTICKET = '/otdsws/rest/authentication/credentials';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLW5leHQvLi9zcmMvY29uc3RhbnRzL0FQSUNvbnN0YW50LmpzPzJiOWIiXSwibmFtZXMiOlsiUE9TVF9MT0dJTiIsIkdFVFVTRVJfVkFMSURBVElPTiIsIlBPU1RVU0VSX1JFU0VUIiwiR0VUX1BST0pFQ1RTIiwiR0VUX1NVQk1JVFRBTFMiLCJHRVRfQVNTSUdOTUVOVFNfTkVXIiwiR0VUX09URFNUSUNLRVQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFJLE9BQStCLEUsQ0FJbkM7OztBQUNPLE1BQU1BLFVBQVUsR0FBRywrQkFBbkI7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxzQkFBM0I7QUFDQSxNQUFNQyxjQUFjLEdBQUcsMEJBQXZCO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLHlFQUFyQjtBQUNBLE1BQU1DLGNBQWMsR0FBRyxrRUFBdkI7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxrRUFBNUI7QUFDQSxNQUFNQyxjQUFjLEdBQUcseUNBQXZCIiwiZmlsZSI6Ii4vc3JjL2NvbnN0YW50cy9BUElDb25zdGFudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IG5lZWRzUHJveHkgPSB3aW5kb3cubG9jYXRpb24uaG9zdC5pbmRleE9mKCc6MzAwMCcpID4gLTFcbiAgICB3aW5kb3cuQ09SU19VUkwgPSBuZWVkc1Byb3h5ID8gJy9sb2NhbC1wcm94eS8nIDogJyc7XG59XG4vLyBHZW5lcmljIEFQSSBlbmRwb2ludHNcbmV4cG9ydCBjb25zdCBQT1NUX0xPR0lOID0gJy9vdGNzL2xsaXNhcGkuZGxsL2FwaS92MS9hdXRoJztcbmV4cG9ydCBjb25zdCBHRVRVU0VSX1ZBTElEQVRJT04gPSAnL0lNU2VydmljZS9jaGVja1VzZXInO1xuZXhwb3J0IGNvbnN0IFBPU1RVU0VSX1JFU0VUID0gJy9JTVNlcnZpY2UvcmVzZXRQYXNzd29yZCc7XG5leHBvcnQgY29uc3QgR0VUX1BST0pFQ1RTID0gJy9vdGNzL2xsaXNhcGkuZGxsL2FwaS92MS9ub2Rlcy8xMTY5MzQ5Mzgvb3V0cHV0P2Zvcm1hdD13ZWJyZXBvcnQmZHJhdz0xJztcbmV4cG9ydCBjb25zdCBHRVRfU1VCTUlUVEFMUyA9ICcvb3Rjcy9sbGlzYXBpLmRsbC9hcGkvdjEvbm9kZXMvMTE2ODk1Nzg4L291dHB1dD9mb3JtYXQ9d2VicmVwb3J0JztcbmV4cG9ydCBjb25zdCBHRVRfQVNTSUdOTUVOVFNfTkVXID0gJy9vdGNzL2xsaXNhcGkuZGxsL2FwaS92MS9ub2Rlcy8xMTc2MzU4MDMvb3V0cHV0P2Zvcm1hdD13ZWJyZXBvcnQnO1xuZXhwb3J0IGNvbnN0IEdFVF9PVERTVElDS0VUID0gJy9vdGRzd3MvcmVzdC9hdXRoZW50aWNhdGlvbi9jcmVkZW50aWFscyc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/constants/APIConstant.js\n");

/***/ }),

/***/ "./src/constants/constant.js":
/*!***********************************!*\
  !*** ./src/constants/constant.js ***!
  \***********************************/
/***/ (function() {

eval("// gtm constants actions//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLW5leHQvLi9zcmMvY29uc3RhbnRzL2NvbnN0YW50LmpzP2U0Y2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIGd0bSBjb25zdGFudHMgYWN0aW9uc1xuIl0sImZpbGUiOiIuL3NyYy9jb25zdGFudHMvY29uc3RhbnQuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/constants/constant.js\n");

/***/ }),

/***/ "./src/contexts/AppContextProvider.js":
/*!********************************************!*\
  !*** ./src/contexts/AppContextProvider.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AppContext\": function() { return /* binding */ AppContext; },\n/* harmony export */   \"default\": function() { return /* binding */ AppContextProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _useAuthReducer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useAuthReducer */ \"./src/contexts/useAuthReducer.js\");\n\nvar _jsxFileName = \"/Users/syedasif/Documents/IM_development/IM/src/contexts/AppContextProvider.js\";\n\n\nconst AppContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createContext(null);\nfunction AppContextProvider({\n  children,\n  ctxReqHeaders,\n  pageProps\n}) {\n  const auth = (0,_useAuthReducer__WEBPACK_IMPORTED_MODULE_2__.default)(ctxReqHeaders);\n\n  if (false) {}\n\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AppContext.Provider, {\n    value: {\n      auth\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLW5leHQvLi9zcmMvY29udGV4dHMvQXBwQ29udGV4dFByb3ZpZGVyLmpzP2NmZDAiXSwibmFtZXMiOlsiQXBwQ29udGV4dCIsIlJlYWN0IiwiQXBwQ29udGV4dFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJjdHhSZXFIZWFkZXJzIiwicGFnZVByb3BzIiwiYXV0aCIsInVzZUF1dGhSZWR1Y2VyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ08sTUFBTUEsVUFBVSxnQkFBR0MsMERBQUEsQ0FBb0IsSUFBcEIsQ0FBbkI7QUFFUSxTQUFTQyxrQkFBVCxDQUE0QjtBQUFDQyxVQUFEO0FBQVdDLGVBQVg7QUFBMEJDO0FBQTFCLENBQTVCLEVBQWtFO0FBRTdFLFFBQU1DLElBQUksR0FBR0Msd0RBQWMsQ0FBQ0gsYUFBRCxDQUEzQjs7QUFDQSxhQUFtQyxFQVNsQzs7QUFFRCxzQkFBTyw4REFBQyxVQUFELENBQVksUUFBWjtBQUFxQixTQUFLLEVBQUU7QUFBQ0U7QUFBRCxLQUE1QjtBQUFBLGNBRUVIO0FBRkY7QUFBQTtBQUFBO0FBQUE7QUFBQSxVQUFQO0FBTUgiLCJmaWxlIjoiLi9zcmMvY29udGV4dHMvQXBwQ29udGV4dFByb3ZpZGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZUF1dGhSZWR1Y2VyIGZyb20gXCIuL3VzZUF1dGhSZWR1Y2VyXCI7XG5leHBvcnQgY29uc3QgQXBwQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcENvbnRleHRQcm92aWRlcih7Y2hpbGRyZW4sIGN0eFJlcUhlYWRlcnMsIHBhZ2VQcm9wc30pIHtcblxuICAgIGNvbnN0IGF1dGggPSB1c2VBdXRoUmVkdWNlcihjdHhSZXFIZWFkZXJzKTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyB3aW5kb3cud2lzaExpc3QgPSB3aXNoTGlzdDtcbiAgICAgICAgLy8gd2luZG93LmNhcnQgPSBjYXJ0O1xuICAgICAgICAvLyB3aW5kb3cuY2hlY2tvdXQgPSBjaGVja291dDtcbiAgICAgICAgd2luZG93LmF1dGggPSBhdXRoO1xuICAgICAgICAvLyB3aW5kb3cuc2VvID0gc2VvO1xuICAgICAgICAvLyB3aW5kb3cubW9iaWxlTWVudSA9IG1vYmlsZU1lbnU7XG4gICAgICAgIC8vIHdpbmRvdy5jdXJyZW50UHJvZHVjdEFjdGlvbnMgPSBjdXJyZW50UHJvZHVjdEFjdGlvbnM7XG4gICAgICAgIHdpbmRvdy5jb250ZXh0ID0ge2F1dGh9O1xuICAgIH1cblxuICAgIHJldHVybiA8QXBwQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e2F1dGh9fT5cbiAgICAgICBcbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgXG4gICAgPC9BcHBDb250ZXh0LlByb3ZpZGVyPjtcblxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/contexts/AppContextProvider.js\n");

/***/ }),

/***/ "./src/contexts/useAuthReducer.js":
/*!****************************************!*\
  !*** ./src/contexts/useAuthReducer.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"helpersCreator\": function() { return /* binding */ helpersCreator; },\n/* harmony export */   \"default\": function() { return /* binding */ useAuthReducer; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utilities_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/utils */ \"./src/utilities/utils.js\");\n/* harmony import */ var _NetworkManager_NetworkManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../NetworkManager/NetworkManager */ \"./src/NetworkManager/NetworkManager.js\");\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_toastify__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! js-cookie */ \"js-cookie\");\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(js_cookie__WEBPACK_IMPORTED_MODULE_5__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nconst reducerCb = (state, action) => {\n  const {\n    payload,\n    type\n  } = action;\n  let newState = {};\n\n  switch (type) {\n    case \"SET_LOGIN_SUCCESS\":\n      const expireDate = payload.expireDate;\n      js_cookie__WEBPACK_IMPORTED_MODULE_5___default().set('email', payload.email, {\n        expires: expireDate\n      });\n      window.sessionStorage.setItem('email', payload.email);\n      window.sessionStorage.setItem('token', payload.token);\n      newState = _objectSpread(_objectSpread(_objectSpread({}, state), payload), {}, {\n        isGuest: false\n      });\n      break;\n\n    case \"SET_PROJECTS\":\n      newState = _objectSpread(_objectSpread({}, state), payload);\n      break;\n\n    case \"SET_SUBMITTALS\":\n      newState = _objectSpread(_objectSpread({}, state), payload);\n      break;\n\n    case \"SET_ASSIGNMENTS_NEW\":\n      newState = _objectSpread(_objectSpread({}, state), payload);\n      break;\n\n    case \"SET_OTDSTICKET\":\n      newState = _objectSpread(_objectSpread({}, state), payload);\n      break;\n\n    default:\n      newState = state;\n      break;\n  }\n\n  return newState;\n};\n\nconst helpersCreator = (state, cookie) => {\n  return {};\n};\n\nconst actionsCreator = (dispatch, state) => {\n  const {\n    cartValue\n  } = state;\n\n  const signIn = async ({\n    email,\n    password\n  }, successUrl = window.localStorage.getItem(\"successUrl\") || \"/\") => {\n    let expireDate;\n    let postData = {\n      username: email,\n      password: password\n    };\n    const {\n      ticket\n    } = await _NetworkManager_NetworkManager__WEBPACK_IMPORTED_MODULE_2__.default.postDataWithUrl(false)(_utilities_utils__WEBPACK_IMPORTED_MODULE_1__.default.makeReactLoginRequestURL(), _objectSpread({}, postData));\n    getTicket(email, password);\n\n    if (ticket) {\n      dispatch({\n        type: \"SET_LOGIN_SUCCESS\",\n        payload: {\n          email,\n          token: ticket\n        }\n      });\n      next_router__WEBPACK_IMPORTED_MODULE_4___default().push(\"/dashboard\", `/dashboard`);\n      return {\n        email\n      };\n    } else {// toast.error(message, {\n      //     position: toast.POSITION.TOP_CENTER\n      // });\n    }\n  };\n\n  const getTicket = async (email, password) => {\n    let postData = {\n      userName: email,\n      password: password\n    };\n    const {\n      ticket\n    } = await _NetworkManager_NetworkManager__WEBPACK_IMPORTED_MODULE_2__.default.postDataWithUrl(true)(_utilities_utils__WEBPACK_IMPORTED_MODULE_1__.default.getOTDSTicket(), _objectSpread({}, postData));\n    dispatch({\n      type: \"SET_OTDSTICKET\",\n      payload: {\n        otdsticket: ticket\n      }\n    });\n    return;\n  };\n\n  const getProjects = async (token, email) => {\n    const response = await _NetworkManager_NetworkManager__WEBPACK_IMPORTED_MODULE_2__.default.getDataWithUrl(token)(_utilities_utils__WEBPACK_IMPORTED_MODULE_1__.default.getProjectRequestURL(email));\n    dispatch({\n      type: \"SET_PROJECTS\",\n      payload: {\n        projects: response === null || response === void 0 ? void 0 : response.data\n      }\n    });\n    return response;\n  };\n\n  const getSubmittals = async (token, contractId, draw, start, end) => {\n    const response = await _NetworkManager_NetworkManager__WEBPACK_IMPORTED_MODULE_2__.default.getDataWithUrl(token)(_utilities_utils__WEBPACK_IMPORTED_MODULE_1__.default.getSubmittalsRequestURL(contractId, draw, start, end));\n    dispatch({\n      type: \"SET_SUBMITTALS\",\n      payload: {\n        subProjects: response === null || response === void 0 ? void 0 : response.data\n      }\n    });\n    return response;\n  };\n\n  const getAssignmentsNew = async (token, type, emailId, draw, start, end) => {\n    dispatch({\n      type: \"SET_ASSIGNMENTS_NEW\",\n      payload: {\n        assignments: []\n      }\n    });\n    const response = await _NetworkManager_NetworkManager__WEBPACK_IMPORTED_MODULE_2__.default.getDataWithUrl(token)(_utilities_utils__WEBPACK_IMPORTED_MODULE_1__.default.getAssignmentsNewURL(type, emailId, draw, start, end));\n    dispatch({\n      type: \"SET_ASSIGNMENTS_NEW\",\n      payload: {\n        assignments: response === null || response === void 0 ? void 0 : response.data\n      }\n    });\n    return response;\n  };\n\n  const uservValidation = async ({\n    email\n  }) => {\n    let postData = {\n      email: email\n    };\n    const response = await _NetworkManager_NetworkManager__WEBPACK_IMPORTED_MODULE_2__.default.getDataWithUrl(false)(_utilities_utils__WEBPACK_IMPORTED_MODULE_1__.default.makeUserValidationRequestURL(), _objectSpread({}, postData));\n\n    if (response) {\n      next_router__WEBPACK_IMPORTED_MODULE_4___default().push(\"/changePassword\", `/changePassword`);\n      return {\n        email\n      };\n    } else {\n      react_toastify__WEBPACK_IMPORTED_MODULE_3__.toast.error(message, {\n        position: react_toastify__WEBPACK_IMPORTED_MODULE_3__.toast.POSITION.TOP_CENTER\n      });\n    }\n  };\n\n  return {\n    signIn,\n    uservValidation,\n    getProjects,\n    getSubmittals,\n    getAssignmentsNew\n  };\n};\n\nfunction useAuthReducer(ctxReqHeaders) {\n  const cookie = {}; //cookieFactory(ctxReqHeaders);\n\n  const initialState = {};\n  const {\n    0: state,\n    1: dispatch\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(reducerCb, initialState);\n  const actions = actionsCreator(dispatch, state);\n  return {\n    state,\n    actions,\n    helpers: helpersCreator(state, cookie)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/contexts/useAuthReducer.js\n");

/***/ }),

/***/ "./src/pages/_app.js":
/*!***************************!*\
  !*** ./src/pages/_app.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_toastify__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _public_js_jquery_min_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../public/js/jquery.min.js */ \"./public/js/jquery.min.js\");\n/* harmony import */ var _public_js_jquery_min_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_public_js_jquery_min_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _public_css_all_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../public/css/all.css */ \"./public/css/all.css\");\n/* harmony import */ var _public_css_all_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_public_css_all_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _public_css_bootstrap_min_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../public/css/bootstrap.min.css */ \"./public/css/bootstrap.min.css\");\n/* harmony import */ var _public_css_bootstrap_min_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_public_css_bootstrap_min_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _public_css_main_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../public/css/main.css */ \"./public/css/main.css\");\n/* harmony import */ var _public_css_main_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_public_css_main_css__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _public_css_pe_icon_7_stroke_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../public/css/pe-icon-7-stroke.css */ \"./public/css/pe-icon-7-stroke.css\");\n/* harmony import */ var _public_css_pe_icon_7_stroke_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_public_css_pe_icon_7_stroke_css__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _contexts_AppContextProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../contexts/AppContextProvider */ \"./src/contexts/AppContextProvider.js\");\n\nvar _jsxFileName = \"/Users/syedasif/Documents/IM_development/IM/src/pages/_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n // import \"react-toastify/dist/ReactToastify.css\";\n\n\n\n\n\n // import \"../../public/js/bootstrap-table.js\";\n\n\n\n\nconst wrapErrorBoundary = children => {\n  if (true) {\n    return children;\n  }\n\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ErrorBoundary, {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 10\n  }, undefined);\n};\n\nfunction MyApp({\n  Component,\n  pageProps,\n  ctxReqHeaders\n}) {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_contexts_AppContextProvider__WEBPACK_IMPORTED_MODULE_8__.default, {\n    ctxReqHeaders: ctxReqHeaders,\n    pageProps: pageProps,\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_toastify__WEBPACK_IMPORTED_MODULE_1__.ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,next_router__WEBPACK_IMPORTED_MODULE_7__.withRouter)(MyApp));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLW5leHQvLi9zcmMvcGFnZXMvX2FwcC5qcz8yMjU0Il0sIm5hbWVzIjpbIndyYXBFcnJvckJvdW5kYXJ5IiwiY2hpbGRyZW4iLCJNeUFwcCIsIkNvbXBvbmVudCIsInBhZ2VQcm9wcyIsImN0eFJlcUhlYWRlcnMiLCJ3aXRoUm91dGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUVBOztBQUVBO0FBQ0E7O0FBRUEsTUFBTUEsaUJBQWlCLEdBQUlDLFFBQUQsSUFBYztBQUN0QyxZQUEyQztBQUN6QyxXQUFPQSxRQUFQO0FBQ0Q7O0FBQ0Qsc0JBQU8sOERBQUMsYUFBRDtBQUFBLGNBQWdCQTtBQUFoQjtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBQVA7QUFDRCxDQUxEOztBQU1BLFNBQVNDLEtBQVQsQ0FBZTtBQUFFQyxXQUFGO0FBQWFDLFdBQWI7QUFBd0JDO0FBQXhCLENBQWYsRUFBd0Q7QUFDdEQsc0JBQ0UsOERBQUMsaUVBQUQ7QUFBb0IsaUJBQWEsRUFBRUEsYUFBbkM7QUFBa0QsYUFBUyxFQUFFRCxTQUE3RDtBQUFBLDRCQUNFLDhEQUFDLFNBQUQsb0JBQWVBLFNBQWY7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQURGLGVBRUUsOERBQUMsMERBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUZGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxVQURGO0FBTUQ7O0FBQ0QsK0RBQWVFLHVEQUFVLENBQUNKLEtBQUQsQ0FBekIiLCJmaWxlIjoiLi9zcmMvcGFnZXMvX2FwcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRvYXN0Q29udGFpbmVyIH0gZnJvbSBcInJlYWN0LXRvYXN0aWZ5XCI7XG4vLyBpbXBvcnQgXCJyZWFjdC10b2FzdGlmeS9kaXN0L1JlYWN0VG9hc3RpZnkuY3NzXCI7XG5pbXBvcnQgXCIuLi8uLi9wdWJsaWMvanMvanF1ZXJ5Lm1pbi5qc1wiO1xuaW1wb3J0IFwiLi4vLi4vcHVibGljL2Nzcy9hbGwuY3NzXCI7XG5pbXBvcnQgXCIuLi8uLi9wdWJsaWMvY3NzL2Jvb3RzdHJhcC5taW4uY3NzXCI7XG5pbXBvcnQgXCIuLi8uLi9wdWJsaWMvY3NzL21haW4uY3NzXCI7XG5pbXBvcnQgXCIuLi8uLi9wdWJsaWMvY3NzL3BlLWljb24tNy1zdHJva2UuY3NzXCI7XG4vLyBpbXBvcnQgXCIuLi8uLi9wdWJsaWMvanMvYm9vdHN0cmFwLXRhYmxlLmpzXCI7XG5cbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcbmltcG9ydCBBcHBDb250ZXh0UHJvdmlkZXIgZnJvbSBcIi4uL2NvbnRleHRzL0FwcENvbnRleHRQcm92aWRlclwiO1xuXG5jb25zdCB3cmFwRXJyb3JCb3VuZGFyeSA9IChjaGlsZHJlbikgPT4ge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHJldHVybiA8RXJyb3JCb3VuZGFyeT57Y2hpbGRyZW59PC9FcnJvckJvdW5kYXJ5Pjtcbn07XG5mdW5jdGlvbiBNeUFwcCh7IENvbXBvbmVudCwgcGFnZVByb3BzLCBjdHhSZXFIZWFkZXJzIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8QXBwQ29udGV4dFByb3ZpZGVyIGN0eFJlcUhlYWRlcnM9e2N0eFJlcUhlYWRlcnN9IHBhZ2VQcm9wcz17cGFnZVByb3BzfT5cbiAgICAgIDxDb21wb25lbnQgey4uLnBhZ2VQcm9wc30gLz5cbiAgICAgIDxUb2FzdENvbnRhaW5lciAvPlxuICAgIDwvQXBwQ29udGV4dFByb3ZpZGVyPlxuICApO1xufVxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcihNeUFwcCk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/pages/_app.js\n");

/***/ }),

/***/ "./src/utilities/utils.js":
/*!********************************!*\
  !*** ./src/utilities/utils.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var next_cookies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-cookies */ \"next-cookies\");\n/* harmony import */ var next_cookies__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_cookies__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-cookie */ \"js-cookie\");\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_cookie__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _constants_APIConstant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/APIConstant */ \"./src/constants/APIConstant.js\");\n/* harmony import */ var _constants_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants/constant */ \"./src/constants/constant.js\");\n/* harmony import */ var _constants_constant__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_constants_constant__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _NetworkManager_NetworkManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../NetworkManager/NetworkManager */ \"./src/NetworkManager/NetworkManager.js\");\n\n\n\n\n\n/**\n * @param path\n * @param params\n * @param ctx\n * @returns {string}\n * @description replace paths with format path/to/:param1:/param2\n */\n\nclass ProjectUtils {\n  static makeReactLoginRequestURL() {\n    return `${window.CORS_URL}${\"https://tempouat.ashghal.gov.qa\"}${_constants_APIConstant__WEBPACK_IMPORTED_MODULE_2__.POST_LOGIN}`;\n  }\n\n  static makeUserValidationRequestURL() {\n    return `${window.CORS_URL}${\"https://tempouat.ashghal.gov.qa\"}${_constants_APIConstant__WEBPACK_IMPORTED_MODULE_2__.GETUSER_VALIDATION}`;\n  }\n\n  static makeResetPasswordRequestURL() {\n    return `${window.CORS_URL}${\"https://tempouat.ashghal.gov.qa\"}${_constants_APIConstant__WEBPACK_IMPORTED_MODULE_2__.POST_LOGIN}`;\n  }\n\n  static getProjectRequestURL(email) {\n    return `${window.CORS_URL}${\"https://tempouat.ashghal.gov.qa\"}${_constants_APIConstant__WEBPACK_IMPORTED_MODULE_2__.GET_PROJECTS}&userID=${email}`;\n  }\n\n  static getSubmittalsRequestURL(ContractDataID, draw, start, end) {\n    return `${window.CORS_URL}${\"https://tempouat.ashghal.gov.qa\"}${_constants_APIConstant__WEBPACK_IMPORTED_MODULE_2__.GET_SUBMITTALS}&ContractDataID=${ContractDataID}&draw=${draw}&start=${start}&length=${end}`;\n  }\n\n  static getAssignmentsNewURL(type, emailId, draw, start, end) {\n    return `${window.CORS_URL}${\"https://tempouat.ashghal.gov.qa\"}${_constants_APIConstant__WEBPACK_IMPORTED_MODULE_2__.GET_ASSIGNMENTS_NEW}&emaildid=${emailId}&draw=${draw}&start=${start}&length=${end}${type}`;\n  }\n\n  static getOTDSTicket() {\n    return `${window.CORS_URL}${\"https://tempouat.ashghal.gov.qa\"}${_constants_APIConstant__WEBPACK_IMPORTED_MODULE_2__.GET_OTDSTICKET}`;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ProjectUtils);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLW5leHQvLi9zcmMvdXRpbGl0aWVzL3V0aWxzLmpzP2Y3MGUiXSwibmFtZXMiOlsiUHJvamVjdFV0aWxzIiwibWFrZVJlYWN0TG9naW5SZXF1ZXN0VVJMIiwid2luZG93IiwiQ09SU19VUkwiLCJwcm9jZXNzIiwiQVBJQ29uc3RhbnQiLCJtYWtlVXNlclZhbGlkYXRpb25SZXF1ZXN0VVJMIiwibWFrZVJlc2V0UGFzc3dvcmRSZXF1ZXN0VVJMIiwiZ2V0UHJvamVjdFJlcXVlc3RVUkwiLCJlbWFpbCIsImdldFN1Ym1pdHRhbHNSZXF1ZXN0VVJMIiwiQ29udHJhY3REYXRhSUQiLCJkcmF3Iiwic3RhcnQiLCJlbmQiLCJnZXRBc3NpZ25tZW50c05ld1VSTCIsInR5cGUiLCJlbWFpbElkIiwiZ2V0T1REU1RpY2tldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLFlBQU4sQ0FBbUI7QUFFZixTQUFPQyx3QkFBUCxHQUFrQztBQUM5QixXQUFRLEdBQUVDLE1BQU0sQ0FBQ0MsUUFBUyxHQUFFQyxpQ0FBMEIsR0FBRUMsOERBQXVCLEVBQS9FO0FBQ0g7O0FBQ0QsU0FBT0MsNEJBQVAsR0FBc0M7QUFDbEMsV0FBUSxHQUFFSixNQUFNLENBQUNDLFFBQVMsR0FBRUMsaUNBQTBCLEdBQUVDLHNFQUErQixFQUF2RjtBQUNIOztBQUNELFNBQU9FLDJCQUFQLEdBQXFDO0FBQ2pDLFdBQVEsR0FBRUwsTUFBTSxDQUFDQyxRQUFTLEdBQUVDLGlDQUEwQixHQUFFQyw4REFBdUIsRUFBL0U7QUFDSDs7QUFDRCxTQUFPRyxvQkFBUCxDQUE0QkMsS0FBNUIsRUFBbUM7QUFDL0IsV0FBUSxHQUFFUCxNQUFNLENBQUNDLFFBQVMsR0FBRUMsaUNBQTBCLEdBQUVDLGdFQUF5QixXQUFVSSxLQUFNLEVBQWpHO0FBQ0g7O0FBQ0QsU0FBT0MsdUJBQVAsQ0FBK0JDLGNBQS9CLEVBQStDQyxJQUEvQyxFQUFxREMsS0FBckQsRUFBNERDLEdBQTVELEVBQWlFO0FBQzdELFdBQVEsR0FBRVosTUFBTSxDQUFDQyxRQUFTLEdBQUVDLGlDQUEwQixHQUFFQyxrRUFBMkIsbUJBQWtCTSxjQUFlLFNBQVFDLElBQUssVUFBU0MsS0FBTSxXQUFVQyxHQUFJLEVBQTlKO0FBQ0g7O0FBQ0QsU0FBT0Msb0JBQVAsQ0FBNEJDLElBQTVCLEVBQWtDQyxPQUFsQyxFQUEyQ0wsSUFBM0MsRUFBaURDLEtBQWpELEVBQXdEQyxHQUF4RCxFQUE2RDtBQUN6RCxXQUFRLEdBQUVaLE1BQU0sQ0FBQ0MsUUFBUyxHQUFFQyxpQ0FBMEIsR0FBRUMsdUVBQWdDLGFBQVlZLE9BQVEsU0FBUUwsSUFBSyxVQUFTQyxLQUFNLFdBQVVDLEdBQUksR0FBRUUsSUFBSyxFQUE3SjtBQUNIOztBQUNELFNBQU9FLGFBQVAsR0FBdUI7QUFDbkIsV0FBUSxHQUFFaEIsTUFBTSxDQUFDQyxRQUFTLEdBQUVDLGlDQUEwQixHQUFFQyxrRUFBMkIsRUFBbkY7QUFDSDs7QUF0QmM7O0FBeUJuQiwrREFBZUwsWUFBZiIsImZpbGUiOiIuL3NyYy91dGlsaXRpZXMvdXRpbHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmV4dENvb2tpZSBmcm9tICduZXh0LWNvb2tpZXMnO1xuaW1wb3J0IGNvb2tpZSBmcm9tICdqcy1jb29raWUnO1xuaW1wb3J0ICogYXMgQVBJQ29uc3RhbnQgZnJvbSAnLi4vY29uc3RhbnRzL0FQSUNvbnN0YW50JztcbmltcG9ydCAqIGFzIENvbnN0YW50cyBmcm9tICcuLi9jb25zdGFudHMvY29uc3RhbnQnO1xuaW1wb3J0IE5ldHdvcmtNYW5hZ2VyIGZyb20gJy4uL05ldHdvcmtNYW5hZ2VyL05ldHdvcmtNYW5hZ2VyJztcblxuLyoqXG4gKiBAcGFyYW0gcGF0aFxuICogQHBhcmFtIHBhcmFtc1xuICogQHBhcmFtIGN0eFxuICogQHJldHVybnMge3N0cmluZ31cbiAqIEBkZXNjcmlwdGlvbiByZXBsYWNlIHBhdGhzIHdpdGggZm9ybWF0IHBhdGgvdG8vOnBhcmFtMTovcGFyYW0yXG4gKi9cblxuY2xhc3MgUHJvamVjdFV0aWxzIHtcblxuICAgIHN0YXRpYyBtYWtlUmVhY3RMb2dpblJlcXVlc3RVUkwoKSB7XG4gICAgICAgIHJldHVybiBgJHt3aW5kb3cuQ09SU19VUkx9JHtwcm9jZXNzLmVudi5CQVNFX0xPQ0FUSU9OfSR7QVBJQ29uc3RhbnQuUE9TVF9MT0dJTn1gO1xuICAgIH1cbiAgICBzdGF0aWMgbWFrZVVzZXJWYWxpZGF0aW9uUmVxdWVzdFVSTCgpIHtcbiAgICAgICAgcmV0dXJuIGAke3dpbmRvdy5DT1JTX1VSTH0ke3Byb2Nlc3MuZW52LkJBU0VfTE9DQVRJT059JHtBUElDb25zdGFudC5HRVRVU0VSX1ZBTElEQVRJT059YDtcbiAgICB9XG4gICAgc3RhdGljIG1ha2VSZXNldFBhc3N3b3JkUmVxdWVzdFVSTCgpIHtcbiAgICAgICAgcmV0dXJuIGAke3dpbmRvdy5DT1JTX1VSTH0ke3Byb2Nlc3MuZW52LkJBU0VfTE9DQVRJT059JHtBUElDb25zdGFudC5QT1NUX0xPR0lOfWA7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRQcm9qZWN0UmVxdWVzdFVSTChlbWFpbCkge1xuICAgICAgICByZXR1cm4gYCR7d2luZG93LkNPUlNfVVJMfSR7cHJvY2Vzcy5lbnYuQkFTRV9MT0NBVElPTn0ke0FQSUNvbnN0YW50LkdFVF9QUk9KRUNUU30mdXNlcklEPSR7ZW1haWx9YDtcbiAgICB9XG4gICAgc3RhdGljIGdldFN1Ym1pdHRhbHNSZXF1ZXN0VVJMKENvbnRyYWN0RGF0YUlELCBkcmF3LCBzdGFydCwgZW5kKSB7XG4gICAgICAgIHJldHVybiBgJHt3aW5kb3cuQ09SU19VUkx9JHtwcm9jZXNzLmVudi5CQVNFX0xPQ0FUSU9OfSR7QVBJQ29uc3RhbnQuR0VUX1NVQk1JVFRBTFN9JkNvbnRyYWN0RGF0YUlEPSR7Q29udHJhY3REYXRhSUR9JmRyYXc9JHtkcmF3fSZzdGFydD0ke3N0YXJ0fSZsZW5ndGg9JHtlbmR9YDtcbiAgICB9XG4gICAgc3RhdGljIGdldEFzc2lnbm1lbnRzTmV3VVJMKHR5cGUsIGVtYWlsSWQsIGRyYXcsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgcmV0dXJuIGAke3dpbmRvdy5DT1JTX1VSTH0ke3Byb2Nlc3MuZW52LkJBU0VfTE9DQVRJT059JHtBUElDb25zdGFudC5HRVRfQVNTSUdOTUVOVFNfTkVXfSZlbWFpbGRpZD0ke2VtYWlsSWR9JmRyYXc9JHtkcmF3fSZzdGFydD0ke3N0YXJ0fSZsZW5ndGg9JHtlbmR9JHt0eXBlfWA7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRPVERTVGlja2V0KCkge1xuICAgICAgICByZXR1cm4gYCR7d2luZG93LkNPUlNfVVJMfSR7cHJvY2Vzcy5lbnYuQkFTRV9MT0NBVElPTn0ke0FQSUNvbnN0YW50LkdFVF9PVERTVElDS0VUfWA7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9qZWN0VXRpbHM7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/utils.js\n");

/***/ }),

/***/ "./public/css/all.css":
/*!****************************!*\
  !*** ./public/css/all.css ***!
  \****************************/
/***/ (function() {



/***/ }),

/***/ "./public/css/bootstrap.min.css":
/*!**************************************!*\
  !*** ./public/css/bootstrap.min.css ***!
  \**************************************/
/***/ (function() {



/***/ }),

/***/ "./public/css/main.css":
/*!*****************************!*\
  !*** ./public/css/main.css ***!
  \*****************************/
/***/ (function() {



/***/ }),

/***/ "./public/css/pe-icon-7-stroke.css":
/*!*****************************************!*\
  !*** ./public/css/pe-icon-7-stroke.css ***!
  \*****************************************/
/***/ (function() {



/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ (function(module) {

"use strict";
module.exports = require("axios");;

/***/ }),

/***/ "js-cookie":
/*!****************************!*\
  !*** external "js-cookie" ***!
  \****************************/
/***/ (function(module) {

"use strict";
module.exports = require("js-cookie");;

/***/ }),

/***/ "next-cookies":
/*!*******************************!*\
  !*** external "next-cookies" ***!
  \*******************************/
/***/ (function(module) {

"use strict";
module.exports = require("next-cookies");;

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/***/ (function(module) {

"use strict";
module.exports = require("next/router");;

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ (function(module) {

"use strict";
module.exports = require("react");;

/***/ }),

/***/ "react-toastify":
/*!*********************************!*\
  !*** external "react-toastify" ***!
  \*********************************/
/***/ (function(module) {

"use strict";
module.exports = require("react-toastify");;

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ (function(module) {

"use strict";
module.exports = require("react/jsx-dev-runtime");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
var __webpack_exports__ = (__webpack_exec__("./src/pages/_app.js"));
module.exports = __webpack_exports__;

})();